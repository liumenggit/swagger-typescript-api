{"version":3,"sources":["../index.ts"],"names":["templateGenBaseConfig","TemplatesGenConfig","generateTemplatesCommand","defineCommand","HTTP_CLIENT","args","generateTemplates","codeGenBaseConfig","CodeGenConfig","generateCommand","package_default","customConfig","customConfigPath","consola","error","generateApi","main","runMain"],"mappings":"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","file":"cli.js","sourcesContent":["import * as path from \"node:path\";\r\nimport * as url from \"node:url\";\r\nimport { defineCommand, runMain } from \"citty\";\r\nimport { consola } from \"consola\";\r\nimport packageJson from \"./package.json\" with { type: \"json\" };\r\nimport { TemplatesGenConfig } from \"./src/commands/generate-templates/configuration.js\";\r\nimport { CodeGenConfig } from \"./src/configuration.js\";\r\nimport { HTTP_CLIENT } from \"./src/constants.js\";\r\nimport { generateApi, generateTemplates } from \"./src/index.js\";\r\nimport type { HttpClientType } from \"./types/index.js\";\r\n\r\nconst templateGenBaseConfig = new TemplatesGenConfig({});\r\n\r\nconst generateTemplatesCommand = defineCommand({\r\n  meta: {\r\n    name: \"generate-templates\",\r\n    description: 'Generate \".ejs\" templates needed for generate api',\r\n  },\r\n  args: {\r\n    \"clean-output\": {\r\n      type: \"boolean\",\r\n      description:\r\n        \"clean output folder before generate template. WARNING: May cause data loss\",\r\n      default: templateGenBaseConfig.cleanOutput,\r\n    },\r\n    \"http-client\": {\r\n      type: \"string\",\r\n      description: `http client type (possible values: ${Object.values(\r\n        HTTP_CLIENT,\r\n      )})`,\r\n      default: templateGenBaseConfig.httpClientType,\r\n    },\r\n    modular: {\r\n      type: \"boolean\",\r\n      description:\r\n        \"generate templates needed to separate files for http client, data contracts, and routes\",\r\n      default: templateGenBaseConfig.modular,\r\n    },\r\n    output: {\r\n      type: \"string\",\r\n      alias: \"o\",\r\n      description: \"output path of generated templates\",\r\n      default: templateGenBaseConfig.output,\r\n    },\r\n    rewrite: {\r\n      type: \"boolean\",\r\n      alias: \"r\",\r\n      description: \"rewrite content in existing templates\",\r\n      default: templateGenBaseConfig.rewrite,\r\n    },\r\n    silent: {\r\n      type: \"boolean\",\r\n      description: \"Output only errors to console\",\r\n      default: templateGenBaseConfig.silent,\r\n    },\r\n    debug: {\r\n      type: \"boolean\",\r\n      description: \"additional information about processes inside this tool\",\r\n      default: templateGenBaseConfig.debug,\r\n    },\r\n  },\r\n  run: async ({ args }) => {\r\n    await generateTemplates({\r\n      cleanOutput: args[\"clean-output\"],\r\n      httpClientType: args[\"http-client\"] as HttpClientType,\r\n      modular: args.modular,\r\n      output: args.output,\r\n      rewrite: args.rewrite,\r\n      silent: args.silent,\r\n      debug: args.debug,\r\n    });\r\n  },\r\n});\r\n\r\nconst codeGenBaseConfig = new CodeGenConfig({});\r\n\r\nconst generateCommand = defineCommand({\r\n  meta: {\r\n    name: \"generate\",\r\n    description: packageJson.description,\r\n  },\r\n  args: {\r\n    path: {\r\n      type: \"string\",\r\n      alias: \"p\",\r\n      description: \"path/url to swagger scheme\",\r\n      required: true,\r\n    },\r\n    output: {\r\n      type: \"string\",\r\n      alias: \"o\",\r\n      description: \"output path of typescript api file\",\r\n      default: \"./\",\r\n    },\r\n    name: {\r\n      type: \"string\",\r\n      alias: \"n\",\r\n      description: \"name of output typescript api file\",\r\n      default: codeGenBaseConfig.fileName,\r\n    },\r\n    templates: {\r\n      type: \"string\",\r\n      alias: \"t\",\r\n      description: \"path to folder containing templates\",\r\n    },\r\n    \"default-as-success\": {\r\n      type: \"boolean\",\r\n      alias: \"d\",\r\n      description:\r\n        'use \"default\" response status code as success response too. some swagger schemas use \"default\" response status code as success response type by default.',\r\n      default: codeGenBaseConfig.defaultResponseAsSuccess,\r\n    },\r\n    responses: {\r\n      type: \"boolean\",\r\n      alias: \"r\",\r\n      description:\r\n        \"generate additional information about request responses also add typings for bad responses\",\r\n      default: codeGenBaseConfig.generateResponses,\r\n    },\r\n    \"union-enums\": {\r\n      type: \"boolean\",\r\n      description: 'generate all \"enum\" types as union types (T1 | T2 | TN)',\r\n      default: codeGenBaseConfig.generateUnionEnums,\r\n    },\r\n    \"add-readonly\": {\r\n      type: \"boolean\",\r\n      description: \"generate readonly properties\",\r\n      default: codeGenBaseConfig.addReadonly,\r\n    },\r\n    \"route-types\": {\r\n      type: \"boolean\",\r\n      description: \"generate type definitions for API routes\",\r\n      default: codeGenBaseConfig.generateRouteTypes,\r\n    },\r\n    \"no-client\": {\r\n      type: \"boolean\",\r\n      description: \"do not generate an API class\",\r\n      default: codeGenBaseConfig.generateClient,\r\n    },\r\n    \"enum-names-as-values\": {\r\n      type: \"boolean\",\r\n      description:\r\n        \"use values in 'x-enumNames' as enum values (not only as keys)\",\r\n      default: codeGenBaseConfig.enumNamesAsValues,\r\n    },\r\n    \"extract-request-params\": {\r\n      description:\r\n        \"extract request params to data contract (Also combine path params and query params into one object)\",\r\n      default: codeGenBaseConfig.extractRequestParams,\r\n    },\r\n    \"extract-request-body\": {\r\n      type: \"boolean\",\r\n      description: \"extract request body type to data contract\",\r\n      default: codeGenBaseConfig.extractRequestBody,\r\n    },\r\n    \"extract-response-body\": {\r\n      type: \"boolean\",\r\n      description: \"extract response body type to data contract\",\r\n      default: codeGenBaseConfig.extractResponseBody,\r\n    },\r\n    \"extract-response-error\": {\r\n      type: \"boolean\",\r\n      description: \"extract response error type to data contract\",\r\n      default: codeGenBaseConfig.extractResponseError,\r\n    },\r\n    \"extract-responses\": {\r\n      type: \"boolean\",\r\n      description: \"extract all responses described in /components/responses\",\r\n      default: codeGenBaseConfig.extractResponses,\r\n    },\r\n    modular: {\r\n      type: \"boolean\",\r\n      description:\r\n        \"generate separated files for http client, data contracts, and routes\",\r\n      default: codeGenBaseConfig.modular,\r\n    },\r\n    js: {\r\n      type: \"boolean\",\r\n      description: \"generate js api module with declaration file\",\r\n      default: codeGenBaseConfig.toJS,\r\n    },\r\n    \"module-name-index\": {\r\n      type: \"string\",\r\n      description:\r\n        \"determines which path index should be used for routes separation (example: GET:/fruits/getFruit -> index:0 -> moduleName -> fruits)\",\r\n      default: codeGenBaseConfig.moduleNameIndex.toString(),\r\n    },\r\n    \"module-name-first-tag\": {\r\n      type: \"boolean\",\r\n      description: \"splits routes based on the first tag\",\r\n      default: codeGenBaseConfig.moduleNameFirstTag,\r\n    },\r\n    axios: {\r\n      type: \"boolean\",\r\n      description: \"generate axios http client\",\r\n      default: false,\r\n    },\r\n    \"unwrap-response-data\": {\r\n      type: \"boolean\",\r\n      description: \"unwrap the data item from the response\",\r\n      default: codeGenBaseConfig.unwrapResponseData,\r\n    },\r\n    \"disable-throw-on-error\": {\r\n      type: \"boolean\",\r\n      description: \"Do not throw an error when response.ok is not true\",\r\n      default: codeGenBaseConfig.disableThrowOnError,\r\n    },\r\n    \"single-http-client\": {\r\n      type: \"boolean\",\r\n      description: \"Ability to send HttpClient instance to Api constructor\",\r\n      default: codeGenBaseConfig.singleHttpClient,\r\n    },\r\n    silent: {\r\n      type: \"boolean\",\r\n      description: \"Output only errors to console\",\r\n      default: codeGenBaseConfig.silent,\r\n    },\r\n    \"default-response\": {\r\n      type: \"string\",\r\n      description: \"default type for empty response schema\",\r\n      default: codeGenBaseConfig.defaultResponseType,\r\n    },\r\n    \"type-prefix\": {\r\n      type: \"string\",\r\n      description: \"data contract name prefix\",\r\n      default: codeGenBaseConfig.typePrefix,\r\n    },\r\n    \"type-suffix\": {\r\n      type: \"string\",\r\n      description: \"data contract name suffix\",\r\n      default: codeGenBaseConfig.typeSuffix,\r\n    },\r\n    \"clean-output\": {\r\n      type: \"boolean\",\r\n      description:\r\n        \"clean output folder before generate api. WARNING: May cause data loss\",\r\n      default: codeGenBaseConfig.cleanOutput,\r\n    },\r\n    \"api-class-name\": {\r\n      type: \"string\",\r\n      description: \"name of the api class\",\r\n      default: codeGenBaseConfig.apiClassName,\r\n    },\r\n    patch: {\r\n      type: \"boolean\",\r\n      description: \"fix up small errors in the swagger source definition\",\r\n      default: codeGenBaseConfig.patch,\r\n    },\r\n    debug: {\r\n      type: \"boolean\",\r\n      description: \"additional information about processes inside this tool\",\r\n      default: codeGenBaseConfig.debug,\r\n    },\r\n    \"another-array-type\": {\r\n      type: \"boolean\",\r\n      description: \"generate array types as Array<Type> (by default Type[])\",\r\n      default: codeGenBaseConfig.anotherArrayType,\r\n    },\r\n    \"sort-types\": {\r\n      type: \"boolean\",\r\n      description: \"sort fields and types\",\r\n      default: codeGenBaseConfig.sortTypes,\r\n    },\r\n    \"extract-enums\": {\r\n      type: \"boolean\",\r\n      description:\r\n        \"extract all enums from inline interface/type content to typescript enum construction\",\r\n      default: codeGenBaseConfig.extractEnums,\r\n    },\r\n    \"sort-routes\": {\r\n      type: \"boolean\",\r\n      description: \"sort routes in alphabetical order\",\r\n      default: codeGenBaseConfig.sortRoutes,\r\n    },\r\n    \"custom-config\": {\r\n      type: \"string\",\r\n      description: \"custom config: primitiveTypeConstructs, hooks, ... \",\r\n    },\r\n  },\r\n  run: async ({ args }) => {\r\n    let customConfig;\r\n\r\n    if (args[\"custom-config\"]) {\r\n      try {\r\n        const customConfigPath = url\r\n          .pathToFileURL(path.resolve(process.cwd(), args[\"custom-config\"]))\r\n          .toString();\r\n        customConfig = await import(customConfigPath);\r\n        customConfig = customConfig.default || customConfig;\r\n        if (customConfig) {\r\n          consola.info(`Found custom config at: ${customConfigPath}`);\r\n        }\r\n      } catch (error) {\r\n        consola.error(\"Error loading custom config:\", error);\r\n      }\r\n    }\r\n\r\n    await generateApi({\r\n      addReadonly: args[\"add-readonly\"],\r\n      anotherArrayType: args[\"another-array-type\"],\r\n      apiClassName: args[\"api-class-name\"],\r\n      cleanOutput: args[\"clean-output\"],\r\n      debug: args.debug,\r\n      defaultResponseAsSuccess: args[\"default-as-success\"],\r\n      defaultResponseType: args[\"default-response\"],\r\n      disableThrowOnError: args[\"disable-throw-on-error\"],\r\n      enumNamesAsValues: args[\"enum-names-as-values\"],\r\n      extractEnums: args[\"extract-enums\"],\r\n      extractRequestBody: args[\"extract-request-body\"],\r\n      extractRequestParams: args[\"extract-request-params\"],\r\n      extractResponseBody: args[\"extract-response-body\"],\r\n      extractResponseError: args[\"extract-response-error\"],\r\n      extractResponses: args[\"extract-responses\"],\r\n      fileName: args.name,\r\n      generateClient: !(args.axios || args[\"no-client\"]),\r\n      generateResponses: args.responses,\r\n      generateRouteTypes: args[\"route-types\"],\r\n      generateUnionEnums: args[\"union-enums\"],\r\n      httpClientType:\r\n        args[\"http-client\"] || args.axios\r\n          ? HTTP_CLIENT.AXIOS\r\n          : HTTP_CLIENT.FETCH,\r\n      input: path.resolve(process.cwd(), args.path as string),\r\n      modular: args.modular,\r\n      moduleNameFirstTag: args[\"module-name-first-tag\"],\r\n      moduleNameIndex: +args[\"module-name-index\"] || 0,\r\n      output: path.resolve(process.cwd(), (args.output as string) || \".\"),\r\n      patch: args.patch,\r\n      silent: args.silent,\r\n      singleHttpClient: args[\"single-http-client\"],\r\n      sortRoutes: args[\"sort-routes\"],\r\n      sortTypes: args[\"sort-types\"],\r\n      templates: args.templates,\r\n      toJS: args.js,\r\n      typePrefix: args[\"type-prefix\"],\r\n      typeSuffix: args[\"type-suffix\"],\r\n      unwrapResponseData: args[\"unwrap-response-data\"],\r\n      url: args.path,\r\n      ...customConfig,\r\n    });\r\n  },\r\n});\r\n\r\nconst main = defineCommand({\r\n  meta: {\r\n    name: packageJson.name,\r\n    description: packageJson.description,\r\n    version: packageJson.version,\r\n  },\r\n  subCommands: {\r\n    generate: generateCommand,\r\n    \"generate-templates\": generateTemplatesCommand,\r\n  },\r\n});\r\n\r\nrunMain(main);\r\n"]}