{"version":3,"sources":["../src/index.ts","../src/code-formatter.ts","../src/configuration.ts","../src/util/name-resolver.ts","../src/util/random.ts","../src/component-type-name-resolver.ts","../src/constants.ts","../package.json","../src/util/object-assign.ts","../src/schema-components-map.ts","../src/schema-parser/schema-formatters.ts","../src/schema-parser/schema-parser.ts","../src/util/sort-by-property.ts","../src/schema-parser/mono-schema-parser.ts","../src/schema-parser/base-schema-parsers/array.ts","../src/schema-parser/base-schema-parsers/complex.ts","../src/schema-parser/base-schema-parsers/discriminator.ts","../src/schema-parser/util/enum-key-resolver.ts","../src/schema-parser/base-schema-parsers/enum.ts","../src/schema-parser/base-schema-parsers/object.ts","../src/schema-parser/base-schema-parsers/primitive.ts","../src/schema-parser/complex-schema-parsers/all-of.ts","../src/schema-parser/complex-schema-parsers/any-of.ts","../src/schema-parser/complex-schema-parsers/not.ts","../src/schema-parser/complex-schema-parsers/one-of.ts","../src/util/internal-case.ts","../src/util/pascal-case.ts","../src/schema-parser/schema-utils.ts","../src/schema-parser/schema-parser-fabric.ts","../src/schema-routes/schema-routes.ts","../src/util/id.ts","../src/schema-routes/util/specific-arg-name-resolver.ts","../src/schema-walker.ts","../src/util/request.ts","../src/swagger-schema-resolver.ts","../src/templates-worker.ts","../src/translators/javascript.ts","../src/translators/translator.ts","../src/type-name-formatter.ts","../src/util/file-system.ts","../src/code-gen-process.ts","../src/commands/generate-templates/configuration.ts","../src/commands/generate-templates/templates-gen-process.ts","../src/commands/generate-templates/index.ts"],"names":["CodeFormatter","config","content","tempFileName","host","TsLanguageServiceHost","fileTextChanges","span","newText","code","removeUnusedImports","prettierFormat","fileName","tsconfig","encoding","path","NameResolver","reservedNames","getFallbackName","names","fixedNames","lodash","name","reservedName","variants","resolver","extras","shouldReserve","usageName","variant","consola","uniqVariants","getRandomFloat","min","max","getRandomInt","ComponentTypeNameResolver","randomVariant","variantCounter","dirtyResolvedName","fallbackName","constants_exports","__export","DEFAULT_BODY_ARG_NAME","FILE_PREFIX","HTTP_CLIENT","PRETTIER_OPTIONS","PROJECT_VERSION","RESERVED_BODY_ARG_NAMES","RESERVED_HEADER_ARG_NAMES","RESERVED_PATH_ARG_NAMES","RESERVED_QUERY_ARG_NAMES","RESERVED_REQ_PARAMS_ARG_NAMES","SCHEMA_TYPES","package_default","objectAssign","target","updater","update","undefinedKeys","value","key","TsKeyword","TsCodeGenKeyword","CodeGenConfig","_routePath","_routeData","_pathParam","schema","_originalSchema","_typeName","_schemaType","parsedSchema","routeData","_codeGenProcess","apiConfig","_rawType","_rawTypeName","_routeInfo","_templateRouteName","ne","contents","readonly","optional","enumStruct","formatFn","part","typeName","genericArgs","values","prettierOptions","getDefaultPrettierOptions","codeGenConstructs","primitiveTypeConstructs","constants","templateInfos","hooks","otherConfig","prettier","SchemaComponentsMap","paths","ref","$ref","rawTypeData","parsed","componentName","componentSchema","usageComponent","refIndex","componentNames","it","c","SchemaFormatters","schemaParser","formatType","schemaType","description","inline","fields","extraSpace","result","routeNameFromTemplate","sortByProperty","propertyName","o1","o2","MonoSchemaParser","schemaPath","ArraySchemaParser","contentType","type","items","tupleContent","item","ComplexSchemaParser","complexType","simpleSchema","complexSchemaContent","DiscriminatorSchemaParser","ts","discriminator","noDiscriminatorSchema","skipMappingType","abstractSchemaStruct","discriminatorSchemaStruct","schemaContent","refPath","mappingEntries","ableToCreateMappingType","mappingContents","mappingTypeName","mappingPropertySchemaEnumKeysMap","rawTypeName","generatedTypeName","component","createMappingContent","mappingSchema","mappingKey","mappingUsageKey","discPropertyName","mappingPropertySchema","acc","index","enumKey","complexSchemaKeys","mappingRefSchema","schemaKey","schemaPropertyName","schemaProperty","schemaIsAny","EnumKeyResolver","generatedVariant","EnumSchemaParser","args","pathTypeName","customComponent","refType","enumNames","enumName","keyType","formatValue","enumValue","formattedKey","formatted","ObjectSchemaParser","contentProperties","properties","additionalProperties","propertiesContent","property","required","nullable","fieldName","fieldValue","readOnly","PrimitiveSchemaParser","fieldType","AllOfSchemaParser","ignoreTypes","combined","childSchema","filtered","AnyOfSchemaParser","NotSchemaParser","OneOfSchemaParser","SchemaParser","schemaParserFabric","responseStruct","firstResponse","firstSchema","internalCase","pascalCase","SchemaUtils","schemaComponentsMap","typeNameFormatter","schemaWalker","propertySchema","rootSchema","isRequired","rawSchema","enumFieldType","resultType","parentSchema","refData","existedRequiredKeys","filterFn","suffixes","prefixes","reserved","prefix","suffix","refTypeInfo","primitiveType","typeAlias","SchemaParserFabric","templatesWorker","linkedSchema","linkedComponent","otherSchemaProps","parser","schemaCopy","ALPHABET","generateId","SpecificArgNameResolver","CONTENT_KIND","SchemaRoutes","routeInfoByMethodsMap","parameters","requestInfo","method","originalRouteName","routeName","pathParamMatches","pathParams","match","paramName","fixedRoute","pathParam","i","arr","insertion","queryParamMatches","queryParams","paramNames","routeInfo","pathParamsFromRouteName","queryParamsFromRouteName","routeParams","parameter","routeParam","queryParam","extraContentTypes","requestInfoData","contentTypes","status","dataType","parsedSchemas","operationId","defaultType","foundedSchemaByName","foundSchemaByContent","foundSchema","typeNameWithoutOpId","requestInfos","produces","responses","responseInfos","successResponse","response","errorResponses","handleResponseHeaders","src","headerTypes","k","v","params","objectSchema","schemaPart","requestBody","consumes","requestBodyName","contentKind","queryObjectSchema","pathArgsSchemas","extractRequestParams","pathArgSchema","fixedQueryParams","fixedSchema","responseBodyInfo","idx","errorSchemas","rawRouteInfo","moduleName","routeNameDuplicatesMap","templatesToRender","routeNameTemplate","duplicateIdentifier","duplicates","routeNameInfo","rawRouteName","usageSchema","globalSecurity","moduleNameIndex","moduleNameFirstTag","security","summary","tags","otherInfo","route","routeId","firstTag","hasSecurity","pathArgs","pathArgsNames","arg","pathObjectSchema","headersObjectSchema","requestBodyInfo","requestParamsSchema","queryType","pathType","headersType","nameResolver","specificArgs","pathArg","pathsEntries","routeInfosMap","parsedRouteInfo","processedRouteInfo","groupedRoutes","modules","routeGroups","routesGroup","originalName","id","routeGroup","routes","routeA","routeB","SchemaWalker","swaggerSchemaResolver","Request","url","authToken","options","requestOptions","error","message","SwaggerSchemaResolver","fileSystem","spec","patch","input","authorizationToken","swaggerSchemaFile","swaggerSchemaObject","swaggerSchema","converterOptions","resolve","err","parsedSwaggerSchema","pathToSwagger","urlToSwagger","file","originalSchema","usagePaths","originalPaths","usagePathObject","originalPathObject","usageRouteInfo","methodName","originalRouteInfo","usageRouteParams","originalRouteParams","originalRouteParam","param","TemplatesWorker","getRenderTemplateData","__dirname","baseTemplatesPath","defaultTemplatesPath","modularTemplatesPath","originalTemplatesPath","customTemplatesPath","ext","path_","raw","extension","packageOrPath","templatePaths","customFullPath","fileContent","baseFullPath","originalFullPath","foundTemplatePathKey","rawPath","fixedPath","customPath","originalPath","template","configuration","Translator","codeFormatter","_input","JavascriptTranslator","fileNameFull","output","R","fileNames","originalSourceFileGet","sourceFileName","languageVersion","onError","shouldCreateNewSourceFile","compiled","jsFileName","dtsFileName","sourceContent","tsImportRows","line","declarationContent","TypeNameFormatter","typePrefix","typeSuffix","hashKey","fixedModelName","formattedName","formattedResultName","FileSystem","fileNameParts","e","withPrefix","Me","Nt","absolutePath","PATCHABLE_INSTANCES","CodeGenProcess","swagger","schemaComponent","rawConfiguration","files","eol","components","modelTypes","modelTypeComponents","getSchemaComponentsCount","schemaComponentsCount","processedCount","modelType","typeInfo","typeData","typeIdentifier","preparedModelType","modular","extraTemplate","fileInfo","generateRouteTypes","generateClient","modularApiFileInfos","outOfModuleRouteContent","outOfModuleApiContent","routeModuleContent","apiModuleContent","fileExtension","Rt","info","servers","basePath","externalDocs","server","title","version","serverUrl","instanceKey","TemplatesGenConfig","TemplatesGenProcess","templates","outputPath","templateName","templateEjsPath","templateEtaPath","templateEjsPathExist","templateEtaPathExist","outputFiles","baseTemplates","httpClientTemplates","apiTemplatesPath","apiTemplates","usingHttpClientTemplate","httpClientTemplateContent","templateContent","importsRegExp1","importsRegExp2","importsRegExp3","dir","pathToFile","generateTemplates","generateApi"],"mappings":"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","file":"chunk-MBHZDCOW.js","sourcesContent":["import { consola } from \"consola\";\r\nimport type { GenerateApiConfiguration } from \"../types/index.js\";\r\nimport { CodeGenProcess } from \"./code-gen-process.js\";\r\n\r\nexport async function generateApi(\r\n  config: Partial<GenerateApiConfiguration[\"config\"]>,\r\n) {\r\n  if (config.debug) consola.level = Number.MAX_SAFE_INTEGER;\r\n  if (config.silent) consola.level = 0;\r\n  const codeGenProcess = new CodeGenProcess(config);\r\n  return await codeGenProcess.start();\r\n}\r\n\r\nexport * as constants from \"./constants.js\";\r\nexport { generateTemplates } from \"./commands/generate-templates/index.js\";\r\n","import * as prettier from \"prettier\";\r\nimport * as typescript from \"typescript\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\n\r\nexport class CodeFormatter {\r\n  config: CodeGenConfig;\r\n\r\n  constructor(config: CodeGenConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  removeUnusedImports = (content: string) => {\r\n    const tempFileName = \"file.ts\";\r\n\r\n    const host = new TsLanguageServiceHost(tempFileName, content);\r\n    const languageService = typescript.createLanguageService(host);\r\n\r\n    const fileTextChanges = languageService.organizeImports(\r\n      { type: \"file\", fileName: tempFileName },\r\n      { newLineCharacter: typescript.sys.newLine },\r\n      undefined,\r\n    )[0];\r\n\r\n    if (fileTextChanges?.textChanges.length) {\r\n      return fileTextChanges.textChanges.reduceRight(\r\n        (content, { span, newText }) =>\r\n          `${content.slice(0, span.start)}${newText}${content.slice(\r\n            span.start + span.length,\r\n          )}`,\r\n        content,\r\n      );\r\n    }\r\n\r\n    return content;\r\n  };\r\n\r\n  prettierFormat = async (content: string) => {\r\n    const formatted = await prettier.format(\r\n      content,\r\n      this.config.prettierOptions,\r\n    );\r\n    return formatted;\r\n  };\r\n\r\n  formatCode = async (\r\n    code: string,\r\n    { removeUnusedImports = true, prettierFormat = true } = {},\r\n  ) => {\r\n    if (removeUnusedImports) {\r\n      code = this.removeUnusedImports(code);\r\n    }\r\n    if (prettierFormat) {\r\n      code = await this.prettierFormat(code);\r\n    }\r\n    return code;\r\n  };\r\n}\r\n\r\nclass TsLanguageServiceHost {\r\n  fileName: string;\r\n  content: string;\r\n  compilerOptions: typescript.CompilerOptions;\r\n\r\n  constructor(fileName: string, content: string) {\r\n    this.fileName = fileName;\r\n    this.content = content;\r\n    const tsconfig = typescript.findConfigFile(\r\n      fileName,\r\n      typescript.sys.fileExists,\r\n    );\r\n    this.compilerOptions = tsconfig\r\n      ? typescript.convertCompilerOptionsFromJson(\r\n          typescript.readConfigFile(tsconfig, typescript.sys.readFile).config\r\n            .compilerOptions,\r\n          \"\",\r\n        ).options\r\n      : typescript.getDefaultCompilerOptions();\r\n  }\r\n\r\n  getNewLine() {\r\n    return \"newLine\" in typescript.sys ? typescript.sys.newLine : \"\\n\";\r\n  }\r\n  getScriptFileNames() {\r\n    return [this.fileName];\r\n  }\r\n  getCompilationSettings() {\r\n    return this.compilerOptions;\r\n  }\r\n  getDefaultLibFileName() {\r\n    return typescript.getDefaultLibFileName(this.getCompilationSettings());\r\n  }\r\n  getCurrentDirectory() {\r\n    return process.cwd();\r\n  }\r\n  getScriptVersion() {\r\n    return typescript.version;\r\n  }\r\n  getScriptSnapshot() {\r\n    return typescript.ScriptSnapshot.fromString(this.content);\r\n  }\r\n  readFile(fileName: string, encoding: string) {\r\n    if (fileName === this.fileName) {\r\n      return this.content;\r\n    }\r\n\r\n    return typescript.sys.readFile(fileName, encoding);\r\n  }\r\n  fileExists(path: string) {\r\n    return typescript.sys.fileExists(path);\r\n  }\r\n}\r\n","import * as cosmiconfig from \"cosmiconfig\";\r\nimport lodash from \"lodash\";\r\nimport type { OpenAPI } from \"openapi-types\";\r\nimport * as typescript from \"typescript\";\r\nimport type {\r\n  ExtractingOptions,\r\n  GenerateApiConfiguration,\r\n} from \"../types/index.js\";\r\nimport { ComponentTypeNameResolver } from \"./component-type-name-resolver.js\";\r\nimport * as CONSTANTS from \"./constants.js\";\r\nimport type { MonoSchemaParser } from \"./schema-parser/mono-schema-parser.js\";\r\nimport type { SchemaParser } from \"./schema-parser/schema-parser.js\";\r\nimport type { Translator } from \"./translators/translator.js\";\r\nimport { objectAssign } from \"./util/object-assign.js\";\r\n\r\nconst TsKeyword = {\r\n  Number: \"number\",\r\n  String: \"string\",\r\n  Boolean: \"boolean\",\r\n  Any: \"any\",\r\n  Void: \"void\",\r\n  Unknown: \"unknown\",\r\n  Null: \"null\",\r\n  Undefined: \"undefined\",\r\n  Object: \"object\",\r\n  File: \"File\",\r\n  Date: \"Date\",\r\n  Type: \"type\",\r\n  Enum: \"enum\",\r\n  Interface: \"interface\",\r\n  Array: \"Array\",\r\n  Record: \"Record\",\r\n  Intersection: \"&\",\r\n  Union: \"|\",\r\n};\r\n\r\nconst TsCodeGenKeyword = {\r\n  UtilRequiredKeys: \"UtilRequiredKeys\",\r\n};\r\n\r\nexport class CodeGenConfig {\r\n  version = CONSTANTS.PROJECT_VERSION;\r\n  /** CLI flag */\r\n  templates = \"\";\r\n  /** CLI flag */\r\n  generateResponses = false;\r\n  /** CLI flag */\r\n  defaultResponseAsSuccess = false;\r\n  /** CLI flag */\r\n  generateRouteTypes = false;\r\n  /** CLI flag */\r\n  generateClient = true;\r\n  /** CLI flag */\r\n  generateUnionEnums = false;\r\n  /** CLI flag */\r\n  addReadonly = false;\r\n  enumNamesAsValues = false;\r\n  /** parsed swagger schema from getSwaggerObject() */\r\n\r\n  /** parsed swagger schema ref */\r\n  swaggerSchema = null;\r\n  /** original (converted to json) swagger schema ref */\r\n  originalSchema = null;\r\n\r\n  /** { \"#/components/schemas/Foo\": @TypeInfo, ... } */\r\n  componentsMap = {};\r\n  /** flag for catching conversion from swagger 2.0 */\r\n  convertedFromSwagger2 = false;\r\n\r\n  /** url index from paths used for merging into modules */\r\n  moduleNameIndex = 0;\r\n\r\n  /** use the first tag for the module name */\r\n  moduleNameFirstTag = false;\r\n  extractRequestParams = false;\r\n  extractRequestBody = false;\r\n  extractResponseBody = false;\r\n  extractResponseError = false;\r\n  extractResponses = false;\r\n  extractEnums = false;\r\n  fileNames = {\r\n    dataContracts: \"data-contracts\",\r\n    routeTypes: \"route-types\",\r\n    httpClient: \"http-client\",\r\n    outOfModuleApi: \"Common\",\r\n  };\r\n  routeNameDuplicatesMap = new Map();\r\n  prettierOptions = { ...CONSTANTS.PRETTIER_OPTIONS };\r\n  hooks = {\r\n    onPreBuildRoutePath: (_routePath: unknown) => void 0,\r\n    onBuildRoutePath: (_routeData: unknown) => void 0,\r\n    onInsertPathParam: (_pathParam: unknown) => void 0,\r\n    onCreateComponent: (schema: unknown) => schema,\r\n    onPreParseSchema: (\r\n      _originalSchema: unknown,\r\n      _typeName: unknown,\r\n      _schemaType: unknown,\r\n    ) => void 0,\r\n    onParseSchema: (_originalSchema: unknown, parsedSchema: unknown) =>\r\n      parsedSchema,\r\n    onCreateRoute: (routeData: unknown) => routeData,\r\n    onInit: (config: unknown, _codeGenProcess: unknown) => config,\r\n    onPrepareConfig: (apiConfig: unknown) => apiConfig,\r\n    onCreateRequestParams: (_rawType: unknown) => {},\r\n    onCreateRouteName: () => {},\r\n    onFormatTypeName: (\r\n      _typeName: unknown,\r\n      _rawTypeName: unknown,\r\n      _schemaType: unknown,\r\n    ) => {},\r\n    onFormatRouteName: (_routeInfo: unknown, _templateRouteName: unknown) => {},\r\n  };\r\n  defaultResponseType;\r\n  singleHttpClient = false;\r\n  httpClientType = CONSTANTS.HTTP_CLIENT.FETCH;\r\n  unwrapResponseData = false;\r\n  disableThrowOnError = false;\r\n  sortTypes = false;\r\n  sortRoutes = false;\r\n  templatePaths = {\r\n    /** `templates/base` */\r\n    base: \"\",\r\n    /** `templates/default` */\r\n    default: \"\",\r\n    /** `templates/modular` */\r\n    modular: \"\",\r\n    /** usage path if `--templates` option is not set */\r\n    original: \"\",\r\n    /** custom path to templates (`--templates`) */\r\n    custom: \"\",\r\n  };\r\n  /** Record<templateName, templateContent> */\r\n  templatesToRender = {\r\n    api: \"\",\r\n    dataContracts: \"\",\r\n    dataContractJsDoc: \"\",\r\n    interfaceDataContract: \"\",\r\n    typeDataContract: \"\",\r\n    enumDataContract: \"\",\r\n    objectFieldJsDoc: \"\",\r\n    httpClient: \"\",\r\n    routeTypes: \"\",\r\n    routeName: \"\",\r\n  };\r\n  schemaParsers: Record<string, (...args: unknown[]) => MonoSchemaParser> = {};\r\n  toJS = false;\r\n  silent = false;\r\n  typePrefix = \"\";\r\n  typeSuffix = \"\";\r\n  enumKeyPrefix = \"\";\r\n  enumKeySuffix = \"\";\r\n  patch = false;\r\n  componentTypeNameResolver: ComponentTypeNameResolver;\r\n  /** name of the main exported class */\r\n  apiClassName = \"Api\";\r\n  debug = false;\r\n  anotherArrayType = false;\r\n  internalTemplateOptions = {\r\n    addUtilRequiredKeysType: false,\r\n  };\r\n  extraTemplates = [];\r\n  input = \"\";\r\n  modular = false;\r\n  output = \"\";\r\n  url = \"\";\r\n  cleanOutput = false;\r\n  spec: OpenAPI.Document | null = null;\r\n  fileName = \"Api.ts\";\r\n  authorizationToken: string | undefined;\r\n  requestOptions = null;\r\n\r\n  jsPrimitiveTypes: string[] = [];\r\n  jsEmptyTypes: string[] = [];\r\n  fixInvalidTypeNamePrefix = \"Type\";\r\n  fixInvalidEnumKeyPrefix = \"Value\";\r\n\r\n  enumKeyResolverName = \"Value\";\r\n  typeNameResolverName = \"ComponentType\";\r\n  specificArgNameResolverName = \"arg\";\r\n\r\n  successResponseStatusRange = [200, 299];\r\n\r\n  extractingOptions: Partial<ExtractingOptions> = {\r\n    requestBodySuffix: [\"Payload\", \"Body\", \"Input\"],\r\n    requestParamsSuffix: [\"Params\"],\r\n    responseBodySuffix: [\"Data\", \"Result\", \"Output\"],\r\n    responseErrorSuffix: [\r\n      \"Error\",\r\n      \"Fail\",\r\n      \"Fails\",\r\n      \"ErrorData\",\r\n      \"HttpError\",\r\n      \"BadResponse\",\r\n    ],\r\n    enumSuffix: [\"Enum\"],\r\n    discriminatorMappingSuffix: [\"Mapping\", \"Mapper\", \"MapType\"],\r\n    discriminatorAbstractPrefix: [\r\n      \"Base\",\r\n      \"Abstract\",\r\n      \"Discriminator\",\r\n      \"Internal\",\r\n      \"Polymorph\",\r\n    ],\r\n  };\r\n\r\n  compilerTsConfig = {\r\n    module: typescript.ModuleKind.ESNext,\r\n    noImplicitReturns: true,\r\n    alwaysStrict: true,\r\n    target: typescript.ScriptTarget.ESNext,\r\n    declaration: true,\r\n    noImplicitAny: false,\r\n    sourceMap: false,\r\n    removeComments: false,\r\n    disableSizeLimit: true,\r\n    esModuleInterop: true,\r\n    emitDecoratorMetadata: true,\r\n    skipLibCheck: true,\r\n  };\r\n  customTranslator?: new () => Translator;\r\n\r\n  Ts = {\r\n    Keyword: structuredClone(TsKeyword),\r\n    CodeGenKeyword: structuredClone(TsCodeGenKeyword),\r\n    /**\r\n     * $A[] or Array<$A>\r\n     */\r\n    ArrayType: (content: unknown) => {\r\n      if (this.anotherArrayType) {\r\n        return this.Ts.TypeWithGeneric(this.Ts.Keyword.Array, [content]);\r\n      }\r\n\r\n      return `${this.Ts.ExpressionGroup(content)}[]`;\r\n    },\r\n    /**\r\n     * \"$A\"\r\n     */\r\n    StringValue: (content: unknown) => `\"${content}\"`,\r\n    /**\r\n     * $A\r\n     */\r\n    BooleanValue: (content: unknown) => `${content}`,\r\n    /**\r\n     * $A\r\n     */\r\n    NumberValue: (content: unknown) => `${content}`,\r\n    /**\r\n     * $A\r\n     */\r\n    NullValue: () => \"null\",\r\n    /**\r\n     * $A1 | $A2\r\n     */\r\n    UnionType: (contents: unknown[]) =>\r\n      lodash.join(lodash.uniq(contents), ` ${this.Ts.Keyword.Union} `),\r\n    /**\r\n     * ($A1)\r\n     */\r\n    ExpressionGroup: (content: unknown) => (content ? `(${content})` : \"\"),\r\n    /**\r\n     * $A1 & $A2\r\n     */\r\n    IntersectionType: (contents: unknown[]) =>\r\n      lodash.join(lodash.uniq(contents), ` ${this.Ts.Keyword.Intersection} `),\r\n    /**\r\n     * Record<$A1, $A2>\r\n     */\r\n    RecordType: (key: unknown, value: unknown) =>\r\n      this.Ts.TypeWithGeneric(this.Ts.Keyword.Record, [key, value]),\r\n    /**\r\n     * readonly $key?:$value\r\n     */\r\n    TypeField: ({ readonly, key, optional, value }: Record<string, unknown>) =>\r\n      lodash\r\n        .compact([readonly && \"readonly \", key, optional && \"?\", \": \", value])\r\n        .join(\"\"),\r\n    /**\r\n     * [key: $A1]: $A2\r\n     */\r\n    InterfaceDynamicField: (key: unknown, value: unknown) =>\r\n      `[key: ${key}]: ${value}`,\r\n\r\n    /**\r\n     * EnumName.EnumKey\r\n     */\r\n    EnumUsageKey: (enumStruct: unknown, key: unknown) => `${enumStruct}.${key}`,\r\n    /**\r\n     * $A1 = $A2\r\n     */\r\n    EnumField: (key: unknown, value: unknown) => `${key} = ${value}`,\r\n    /**\r\n     * $A0.key = $A0.value,\r\n     * $A1.key = $A1.value,\r\n     * $AN.key = $AN.value,\r\n     */\r\n    EnumFieldsWrapper: (contents: Record<string, unknown>[]) =>\r\n      lodash\r\n        .map(contents, ({ key, value }) => `  ${this.Ts.EnumField(key, value)}`)\r\n        .join(\",\\n\"),\r\n    /**\r\n     * {\\n $A \\n}\r\n     */\r\n    ObjectWrapper: (content: unknown) => `{\\n${content}\\n}`,\r\n    /**\r\n     * /** $A *\\/\r\n     */\r\n    MultilineComment: (\r\n      contents: unknown[],\r\n      formatFn: (arg: unknown) => unknown,\r\n    ) =>\r\n      [\r\n        ...(contents.length === 1\r\n          ? [`/** ${contents[0]} */`]\r\n          : [\"/**\", ...contents.map((content) => ` * ${content}`), \" */\"]),\r\n      ].map((part) => `${formatFn ? formatFn(part) : part}\\n`),\r\n    /**\r\n     * $A1<...$A2.join(,)>\r\n     */\r\n    TypeWithGeneric: (typeName: unknown, genericArgs: unknown[]) => {\r\n      return `${typeName}${\r\n        genericArgs.length ? `<${genericArgs.join(\",\")}>` : \"\"\r\n      }`;\r\n    },\r\n    /**\r\n     * [$A1, $A2, ...$AN]\r\n     */\r\n    Tuple: (values: unknown[]) => {\r\n      return `[${values.join(\", \")}]`;\r\n    },\r\n  };\r\n\r\n  /**\r\n   * swagger schema type -> typescript type\r\n   * https://json-schema.org/understanding-json-schema/reference/string.html#dates-and-times\r\n   */\r\n  primitiveTypes: Record<\r\n    string,\r\n    | string\r\n    | ((schema: OpenAPI.Document, parser: SchemaParser) => string)\r\n    | ({ $default: string } & Record<\r\n        string,\r\n        string | ((schema: OpenAPI.Document, parser: SchemaParser) => string)\r\n      >)\r\n  > = {\r\n    integer: () => this.Ts.Keyword.Number,\r\n    number: () => this.Ts.Keyword.Number,\r\n    boolean: () => this.Ts.Keyword.Boolean,\r\n    object: () => this.Ts.Keyword.Object,\r\n    file: () => this.Ts.Keyword.File,\r\n    string: {\r\n      $default: this.Ts.Keyword.String,\r\n\r\n      /** formats */\r\n      binary: () => this.Ts.Keyword.File,\r\n      file: () => this.Ts.Keyword.File,\r\n      \"date-time\": () => this.Ts.Keyword.String,\r\n      time: () => this.Ts.Keyword.String,\r\n      date: () => this.Ts.Keyword.String,\r\n      duration: () => this.Ts.Keyword.String,\r\n      email: () => this.Ts.Keyword.String,\r\n      \"idn-email\": () => this.Ts.Keyword.String,\r\n      \"idn-hostname\": () => this.Ts.Keyword.String,\r\n      ipv4: () => this.Ts.Keyword.String,\r\n      ipv6: () => this.Ts.Keyword.String,\r\n      uuid: () => this.Ts.Keyword.String,\r\n      uri: () => this.Ts.Keyword.String,\r\n      \"uri-reference\": () => this.Ts.Keyword.String,\r\n      \"uri-template\": () => this.Ts.Keyword.String,\r\n      \"json-pointer\": () => this.Ts.Keyword.String,\r\n      \"relative-json-pointer\": () => this.Ts.Keyword.String,\r\n      regex: () => this.Ts.Keyword.String,\r\n    },\r\n  };\r\n\r\n  templateInfos = [\r\n    { name: \"api\", fileName: \"api\" },\r\n    { name: \"dataContracts\", fileName: \"data-contracts\" },\r\n    { name: \"dataContractJsDoc\", fileName: \"data-contract-jsdoc\" },\r\n    { name: \"interfaceDataContract\", fileName: \"interface-data-contract\" },\r\n    { name: \"typeDataContract\", fileName: \"type-data-contract\" },\r\n    { name: \"enumDataContract\", fileName: \"enum-data-contract\" },\r\n    { name: \"objectFieldJsDoc\", fileName: \"object-field-jsdoc\" },\r\n    { name: \"httpClient\", fileName: \"http-client\" },\r\n    { name: \"routeTypes\", fileName: \"route-types\" },\r\n    { name: \"routeName\", fileName: \"route-name\" },\r\n  ];\r\n\r\n  templateExtensions = [\".eta\", \".ejs\"];\r\n\r\n  constructor({\r\n    prettierOptions = getDefaultPrettierOptions(),\r\n    codeGenConstructs,\r\n    primitiveTypeConstructs,\r\n    constants,\r\n    templateInfos,\r\n    hooks,\r\n    ...otherConfig\r\n  }: Partial<GenerateApiConfiguration[\"config\"]>) {\r\n    objectAssign(this.Ts, codeGenConstructs);\r\n    objectAssign(this.primitiveTypes, primitiveTypeConstructs);\r\n\r\n    this.defaultResponseType = this.Ts.Keyword.Void;\r\n\r\n    this.update({\r\n      ...otherConfig,\r\n      prettierOptions:\r\n        prettierOptions === undefined\r\n          ? getDefaultPrettierOptions()\r\n          : prettierOptions,\r\n      hooks: lodash.merge(this.hooks, hooks || {}),\r\n      constants: {\r\n        ...CONSTANTS,\r\n        ...constants,\r\n      },\r\n      templateInfos: templateInfos || this.templateInfos,\r\n    });\r\n\r\n    this.jsPrimitiveTypes = [\r\n      this.Ts.Keyword.Number,\r\n      this.Ts.Keyword.String,\r\n      this.Ts.Keyword.Boolean,\r\n    ];\r\n    this.jsEmptyTypes = [this.Ts.Keyword.Null, this.Ts.Keyword.Undefined];\r\n    this.componentTypeNameResolver = new ComponentTypeNameResolver(this, []);\r\n  }\r\n\r\n  update = (update: Partial<GenerateApiConfiguration[\"config\"]>) => {\r\n    objectAssign(this, update);\r\n  };\r\n}\r\n\r\nconst getDefaultPrettierOptions = () => {\r\n  const prettier = cosmiconfig\r\n    .cosmiconfigSync(\"prettier\", {\r\n      searchStrategy: \"global\",\r\n    })\r\n    .search();\r\n\r\n  if (prettier) {\r\n    return {\r\n      ...prettier.config,\r\n      parser: \"typescript\",\r\n    };\r\n  }\r\n\r\n  return { ...CONSTANTS.PRETTIER_OPTIONS };\r\n};\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\n\r\ntype Resolver = (reserved: string[], extras?: string[]) => string;\r\n\r\nexport class NameResolver {\r\n  reservedNames: string[] = [];\r\n  getFallbackName: Resolver;\r\n\r\n  config: CodeGenConfig;\r\n\r\n  constructor(\r\n    config: CodeGenConfig,\r\n    reservedNames: string[],\r\n    getFallbackName: Resolver,\r\n  ) {\r\n    this.config = config;\r\n    this.getFallbackName = getFallbackName;\r\n    this.reserve(reservedNames);\r\n  }\r\n\r\n  reserve(names: string[]) {\r\n    const fixedNames = lodash.uniq(lodash.compact(names));\r\n    for (const name of fixedNames) {\r\n      if (this.reservedNames.indexOf(name) === -1) {\r\n        this.reservedNames.push(name);\r\n      }\r\n    }\r\n  }\r\n\r\n  unreserve(names: string[]) {\r\n    this.reservedNames.filter(\r\n      (reservedName) => !names.some((name) => name === reservedName),\r\n    );\r\n  }\r\n\r\n  isReserved(name: string) {\r\n    return this.reservedNames.some((reservedName) => reservedName === name);\r\n  }\r\n\r\n  resolve(\r\n    variants: string[],\r\n    resolver?: Resolver,\r\n    extras?: string[],\r\n    shouldReserve = true,\r\n  ): string | null {\r\n    if (typeof resolver === \"function\") {\r\n      let usageName: string | null = null;\r\n      while (usageName === null) {\r\n        const variant = resolver(variants, extras);\r\n\r\n        if (variant === undefined) {\r\n          consola.warn(\r\n            \"unable to resolve name. current reserved names: \",\r\n            ...this.reservedNames,\r\n          );\r\n          return null;\r\n        }\r\n        if (!shouldReserve || !this.isReserved(variant)) {\r\n          usageName = variant;\r\n        }\r\n      }\r\n\r\n      shouldReserve && this.reserve([usageName]);\r\n      return usageName;\r\n    }\r\n\r\n    if (Array.isArray(variants)) {\r\n      let usageName: string | null = null;\r\n      const uniqVariants = lodash.uniq(lodash.compact(variants));\r\n\r\n      for (const variant of uniqVariants) {\r\n        if (!usageName && (!shouldReserve || !this.isReserved(variant))) {\r\n          usageName = variant;\r\n        }\r\n      }\r\n\r\n      if (usageName) {\r\n        shouldReserve && this.reserve([usageName]);\r\n        return usageName;\r\n      }\r\n\r\n      consola.debug(\r\n        \"trying to resolve name with using fallback name generator using variants\",\r\n        ...variants,\r\n      );\r\n      return this.resolve(variants, this.getFallbackName, extras);\r\n    }\r\n\r\n    consola.debug(\r\n      \"problem with reserving names. current reserved names: \",\r\n      ...this.reservedNames,\r\n    );\r\n    return null;\r\n  }\r\n}\r\n","export const getRandomFloat = (min = 0, max = 1) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nexport const getRandomInt = (min = 0, max = 1) => {\r\n  if (min === max) return min;\r\n\r\n  return Math.round(getRandomFloat(min, max));\r\n};\r\n","import { consola } from \"consola\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\nimport { NameResolver } from \"./util/name-resolver.js\";\r\nimport { getRandomInt } from \"./util/random.js\";\r\n\r\nexport class ComponentTypeNameResolver extends NameResolver {\r\n  counter = 1;\r\n  fallbackNameCounter = 1;\r\n  countersByVariant = new Map<string, number>();\r\n\r\n  constructor(config: CodeGenConfig, reservedNames: string[]) {\r\n    super(config, reservedNames, (variants) => {\r\n      const randomVariant = variants[getRandomInt(0, variants.length - 1)];\r\n      if (randomVariant) {\r\n        if (!this.countersByVariant.has(randomVariant)) {\r\n          this.countersByVariant.set(randomVariant, 0);\r\n        }\r\n        const variantCounter =\r\n          (this.countersByVariant.get(randomVariant) as number) + 1;\r\n        this.countersByVariant.set(randomVariant, variantCounter);\r\n        const dirtyResolvedName = `${randomVariant}${variantCounter}`;\r\n        consola.debug(\r\n          \"generated dirty resolved type name for component - \",\r\n          dirtyResolvedName,\r\n        );\r\n        return dirtyResolvedName;\r\n      }\r\n\r\n      const fallbackName = `${this.config.componentTypeNameResolver}${this\r\n        .fallbackNameCounter++}`;\r\n      consola.debug(\r\n        \"generated fallback type name for component - \",\r\n        fallbackName,\r\n      );\r\n      return fallbackName;\r\n    });\r\n  }\r\n}\r\n","import packageJson from \"../package.json\" with { type: \"json\" };\r\n\r\nexport const DEFAULT_BODY_ARG_NAME = \"data\";\r\n\r\nexport const FILE_PREFIX = `/* eslint-disable */\r\n/* tslint:disable */\r\n// @ts-nocheck\r\n/*\r\n * ---------------------------------------------------------------\r\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\r\n * ##                                                           ##\r\n * ## AUTHOR: acacode                                           ##\r\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\r\n * ---------------------------------------------------------------\r\n */\r\n\r\n`;\r\n\r\nexport const HTTP_CLIENT = {\r\n  FETCH: \"fetch\",\r\n  AXIOS: \"axios\",\r\n} as const;\r\n\r\nexport const PRETTIER_OPTIONS = {\r\n  printWidth: 120,\r\n  tabWidth: 2,\r\n  trailingComma: \"all\",\r\n  parser: \"typescript\",\r\n} as const;\r\n\r\nexport const PROJECT_VERSION = packageJson.version;\r\n\r\nexport const RESERVED_BODY_ARG_NAMES = [\"data\", \"body\", \"reqBody\"];\r\n\r\nexport const RESERVED_HEADER_ARG_NAMES = [\"headers\", \"headersParams\"];\r\n\r\nexport const RESERVED_PATH_ARG_NAMES = [\"path\", \"pathParams\"];\r\n\r\nexport const RESERVED_QUERY_ARG_NAMES = [\"query\", \"queryParams\", \"queryArg\"];\r\n\r\nexport const RESERVED_REQ_PARAMS_ARG_NAMES = [\r\n  \"params\",\r\n  \"requestParams\",\r\n  \"reqParams\",\r\n  \"httpParams\",\r\n];\r\n\r\nexport const SCHEMA_TYPES = {\r\n  ARRAY: \"array\",\r\n  OBJECT: \"object\",\r\n  ENUM: \"enum\",\r\n  REF: \"$ref\",\r\n  PRIMITIVE: \"primitive\",\r\n  COMPLEX: \"complex\",\r\n  DISCRIMINATOR: \"discriminator\",\r\n  COMPLEX_ONE_OF: \"oneOf\",\r\n  COMPLEX_ANY_OF: \"anyOf\",\r\n  COMPLEX_ALL_OF: \"allOf\",\r\n  COMPLEX_NOT: \"not\",\r\n  COMPLEX_UNKNOWN: \"__unknown\",\r\n} as const;\r\n","{\r\n  \"name\": \"swagger-typescript-api\",\r\n  \"version\": \"13.0.22\",\r\n  \"description\": \"Generate the API client for Fetch or Axios from an OpenAPI Specification\",\r\n  \"homepage\": \"https://github.com/acacode/swagger-typescript-api\",\r\n  \"bugs\": \"https://github.com/acacode/swagger-typescript-api/issues\",\r\n  \"repository\": \"github:acacode/swagger-typescript-api\",\r\n  \"license\": \"MIT\",\r\n  \"author\": \"Sergey Volkov <js2me@outlook.com>\",\r\n  \"contributors\": [\r\n    \"Sora Morimoto <sora@morimoto.io>\"\r\n  ],\r\n  \"type\": \"module\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"import\": {\r\n        \"default\": \"./dist/lib.js\"\r\n      },\r\n      \"require\": {\r\n        \"default\": \"./dist/lib.cjs\"\r\n      }\r\n    }\r\n  },\r\n  \"main\": \"./dist/lib.cjs\",\r\n  \"module\": \"./dist/lib.js\",\r\n  \"bin\": {\r\n    \"sta\": \"./dist/cli.js\",\r\n    \"swagger-typescript-api\": \"./dist/cli.js\"\r\n  },\r\n  \"files\": [\r\n    \"dist\",\r\n    \"templates\"\r\n  ],\r\n  \"scripts\": {\r\n    \"build\": \"tsup\",\r\n    \"cli:help\": \"node index.js -h\",\r\n    \"cli:json\": \"node index.js -r -d -p ./swagger-test-cli.json -n swagger-test-cli.ts\",\r\n    \"cli:yaml\": \"node index.js -r -d -p ./swagger-test-cli.yaml -n swagger-test-cli.ts\",\r\n    \"format\": \"biome format --write .\",\r\n    \"format:check\": \"biome format .\",\r\n    \"lint\": \"biome check\",\r\n    \"prepack\": \"tsup\",\r\n    \"test\": \"vitest run\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@types/swagger-schema-official\": \"^2.0.25\",\r\n    \"citty\": \"^0.1.6\",\r\n    \"consola\": \"^3.4.0\",\r\n    \"cosmiconfig\": \"^9.0.0\",\r\n    \"eta\": \"^2.2.0\",\r\n    \"js-yaml\": \"^4.1.0\",\r\n    \"lodash\": \"^4.17.21\",\r\n    \"nanoid\": \"^5.0.9\",\r\n    \"prettier\": \"~3.5.0\",\r\n    \"swagger-schema-official\": \"2.0.0-bab6bed\",\r\n    \"swagger2openapi\": \"^7.0.8\",\r\n    \"typescript\": \"~5.7.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@biomejs/biome\": \"1.9.4\",\r\n    \"@changesets/changelog-github\": \"0.5.0\",\r\n    \"@changesets/cli\": \"2.27.12\",\r\n    \"@tsconfig/node18\": \"18.2.4\",\r\n    \"@tsconfig/strictest\": \"2.0.5\",\r\n    \"@types/js-yaml\": \"4.0.9\",\r\n    \"@types/lodash\": \"4.17.15\",\r\n    \"@types/node\": \"22.13.1\",\r\n    \"@types/swagger2openapi\": \"7.0.4\",\r\n    \"axios\": \"1.7.9\",\r\n    \"openapi-types\": \"12.1.3\",\r\n    \"tsup\": \"8.3.6\",\r\n    \"vitest\": \"3.0.5\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=18.0.0\"\r\n  },\r\n  \"publishConfig\": {\r\n    \"access\": \"public\",\r\n    \"registry\": \"https://registry.npmjs.org\"\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\n\r\ntype Updater = (target: unknown) => unknown;\r\n\r\nexport const objectAssign = (target: object, updater: Updater | unknown) => {\r\n  if (!updater) return;\r\n  const update = typeof updater === \"function\" ? updater(target) : updater;\r\n  const undefinedKeys = lodash\r\n    .map(update, (value, key) => value === undefined && key)\r\n    .filter((key) => typeof key === \"string\");\r\n  Object.assign(target, lodash.merge(target, update));\r\n  for (const key of undefinedKeys) {\r\n    target[key] = undefined;\r\n  }\r\n};\r\n","import type { SchemaComponent } from \"../types/index.js\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\n\r\nexport class SchemaComponentsMap {\r\n  _data: SchemaComponent[] = [];\r\n  config: CodeGenConfig;\r\n\r\n  constructor(config: CodeGenConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  clear() {\r\n    this._data = [];\r\n  }\r\n\r\n  createRef = (paths: string[]) => {\r\n    return [\"#\", ...paths].join(\"/\");\r\n  };\r\n\r\n  parseRef = (ref: string) => {\r\n    return ref.split(\"/\");\r\n  };\r\n\r\n  createComponent($ref: string, rawTypeData: string) {\r\n    const parsed = this.parseRef($ref);\r\n    const typeName = parsed[parsed.length - 1];\r\n    const componentName = parsed[parsed.length - 2];\r\n    const componentSchema = {\r\n      $ref,\r\n      typeName,\r\n      rawTypeData,\r\n      componentName,\r\n      /** result from schema parser */\r\n      typeData: null,\r\n    };\r\n\r\n    const usageComponent =\r\n      this.config.hooks.onCreateComponent(componentSchema) || componentSchema;\r\n\r\n    const refIndex = this._data.findIndex((c) => c.$ref === $ref);\r\n\r\n    if (refIndex === -1) {\r\n      this._data.push(usageComponent);\r\n    } else {\r\n      this._data[refIndex] = usageComponent;\r\n    }\r\n\r\n    return usageComponent;\r\n  }\r\n\r\n  getComponents() {\r\n    return this._data;\r\n  }\r\n\r\n  filter(...componentNames: string[]) {\r\n    return this._data.filter((it) =>\r\n      componentNames.some((componentName) =>\r\n        it.$ref.startsWith(`#/components/${componentName}`),\r\n      ),\r\n    );\r\n  }\r\n\r\n  get($ref: string) {\r\n    return this._data.find((c) => c.$ref === $ref) || null;\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\nimport { SCHEMA_TYPES } from \"../constants.js\";\r\nimport type { TemplatesWorker } from \"../templates-worker.js\";\r\nimport type { SchemaParserFabric } from \"./schema-parser-fabric.js\";\r\nimport type { SchemaParser } from \"./schema-parser.js\";\r\nimport type { SchemaUtils } from \"./schema-utils.js\";\r\n\r\nexport class SchemaFormatters {\r\n  config: CodeGenConfig;\r\n  templatesWorker: TemplatesWorker;\r\n  schemaUtils: SchemaUtils;\r\n\r\n  constructor(schemaParser: SchemaParser | SchemaParserFabric) {\r\n    this.config = schemaParser.config;\r\n    this.schemaUtils = schemaParser.schemaUtils;\r\n    this.templatesWorker = schemaParser.templatesWorker;\r\n  }\r\n\r\n  base = {\r\n    [SCHEMA_TYPES.ENUM]: (parsedSchema) => {\r\n      if (this.config.generateUnionEnums) {\r\n        return {\r\n          ...parsedSchema,\r\n          $content: parsedSchema.content,\r\n          content: this.config.Ts.UnionType(\r\n            parsedSchema.content.map(({ value }) => value),\r\n          ),\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...parsedSchema,\r\n        $content: parsedSchema.content,\r\n        content: this.config.Ts.EnumFieldsWrapper(parsedSchema.content),\r\n      };\r\n    },\r\n    [SCHEMA_TYPES.OBJECT]: (parsedSchema) => {\r\n      if (parsedSchema.nullable)\r\n        return this.inline[SCHEMA_TYPES.OBJECT](parsedSchema);\r\n      return {\r\n        ...parsedSchema,\r\n        $content: parsedSchema.content,\r\n        content: this.formatObjectContent(parsedSchema.content),\r\n      };\r\n    },\r\n    [SCHEMA_TYPES.PRIMITIVE]: (parsedSchema) => {\r\n      return {\r\n        ...parsedSchema,\r\n        $content: parsedSchema.content,\r\n      };\r\n    },\r\n  };\r\n  inline = {\r\n    [SCHEMA_TYPES.ENUM]: (parsedSchema) => {\r\n      return {\r\n        ...parsedSchema,\r\n        content: parsedSchema.$ref\r\n          ? parsedSchema.typeName\r\n          : this.config.Ts.UnionType(\r\n              lodash.compact([\r\n                ...parsedSchema.content.map(({ value }) => `${value}`),\r\n                parsedSchema.nullable && this.config.Ts.Keyword.Null,\r\n              ]),\r\n            ) || this.config.Ts.Keyword.Any,\r\n      };\r\n    },\r\n    [SCHEMA_TYPES.OBJECT]: (parsedSchema) => {\r\n      if (typeof parsedSchema.content === \"string\")\r\n        return {\r\n          ...parsedSchema,\r\n          typeIdentifier: this.config.Ts.Keyword.Type,\r\n          content: this.schemaUtils.safeAddNullToType(parsedSchema.content),\r\n        };\r\n\r\n      return {\r\n        ...parsedSchema,\r\n        typeIdentifier: this.config.Ts.Keyword.Type,\r\n        content: this.schemaUtils.safeAddNullToType(\r\n          parsedSchema,\r\n          parsedSchema.content.length\r\n            ? this.config.Ts.ObjectWrapper(\r\n                this.formatObjectContent(parsedSchema.content),\r\n              )\r\n            : this.config.Ts.RecordType(\r\n                this.config.Ts.Keyword.String,\r\n                this.config.Ts.Keyword.Any,\r\n              ),\r\n        ),\r\n      };\r\n    },\r\n  };\r\n\r\n  formatSchema = (\r\n    parsedSchema: Record<string, any>,\r\n    formatType: \"base\" | \"inline\" = \"base\",\r\n  ) => {\r\n    const schemaType =\r\n      lodash.get(parsedSchema, [\"schemaType\"]) ||\r\n      lodash.get(parsedSchema, [\"$parsed\", \"schemaType\"]);\r\n    const formatterFn = lodash.get(this, [formatType, schemaType]);\r\n    return formatterFn?.(parsedSchema) || parsedSchema;\r\n  };\r\n\r\n  formatDescription = (description, inline) => {\r\n    if (!description) return \"\";\r\n\r\n    const hasMultipleLines = description.includes(\"\\n\");\r\n\r\n    if (!hasMultipleLines) return description;\r\n\r\n    if (inline) {\r\n      return (\r\n        lodash\r\n          // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'LoDashStatic'... Remove this comment to see the full error message\r\n          ._(description)\r\n          .split(/\\n/g)\r\n          .map((part) => part.trim())\r\n          .compact()\r\n          .join(\" \")\r\n          .valueOf()\r\n      );\r\n    }\r\n\r\n    return description.replace(/\\n$/g, \"\");\r\n  };\r\n\r\n  formatObjectContent = (content) => {\r\n    const fields = [];\r\n\r\n    for (const part of content) {\r\n      const extraSpace = \"  \";\r\n      const result = `${extraSpace}${part.field},\\n`;\r\n\r\n      const renderedJsDoc = this.templatesWorker.renderTemplate(\r\n        this.config.templatesToRender.dataContractJsDoc,\r\n        {\r\n          data: part,\r\n        },\r\n      );\r\n\r\n      const routeNameFromTemplate = renderedJsDoc\r\n        .split(\"\\n\")\r\n        .map((c) => `${extraSpace}${c}`)\r\n        .join(\"\\n\");\r\n\r\n      if (routeNameFromTemplate) {\r\n        fields.push(`${routeNameFromTemplate}${result}`);\r\n      } else {\r\n        fields.push(`${result}`);\r\n      }\r\n    }\r\n\r\n    return fields.join(\"\");\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\nimport { SCHEMA_TYPES } from \"../constants.js\";\r\nimport type { SchemaComponentsMap } from \"../schema-components-map.js\";\r\nimport type { SchemaWalker } from \"../schema-walker.js\";\r\nimport type { TemplatesWorker } from \"../templates-worker.js\";\r\nimport type { TypeNameFormatter } from \"../type-name-formatter.js\";\r\nimport { sortByProperty } from \"../util/sort-by-property.js\";\r\nimport { ArraySchemaParser } from \"./base-schema-parsers/array.js\";\r\nimport { ComplexSchemaParser } from \"./base-schema-parsers/complex.js\";\r\nimport { DiscriminatorSchemaParser } from \"./base-schema-parsers/discriminator.js\";\r\nimport { EnumSchemaParser } from \"./base-schema-parsers/enum.js\";\r\nimport { ObjectSchemaParser } from \"./base-schema-parsers/object.js\";\r\nimport { PrimitiveSchemaParser } from \"./base-schema-parsers/primitive.js\";\r\nimport { AllOfSchemaParser } from \"./complex-schema-parsers/all-of.js\";\r\nimport { AnyOfSchemaParser } from \"./complex-schema-parsers/any-of.js\";\r\nimport { NotSchemaParser } from \"./complex-schema-parsers/not.js\";\r\nimport { OneOfSchemaParser } from \"./complex-schema-parsers/one-of.js\";\r\nimport type { SchemaFormatters } from \"./schema-formatters.js\";\r\nimport type { SchemaParserFabric } from \"./schema-parser-fabric.js\";\r\nimport type { SchemaUtils } from \"./schema-utils.js\";\r\n\r\nexport class SchemaParser {\r\n  schemaParserFabric: SchemaParserFabric;\r\n  config: CodeGenConfig;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaFormatters: SchemaFormatters;\r\n  schemaUtils: SchemaUtils;\r\n  templatesWorker: TemplatesWorker;\r\n  schemaWalker: SchemaWalker;\r\n\r\n  typeName;\r\n  schema;\r\n  schemaPath = [];\r\n\r\n  // @ts-expect-error TS(2525) FIXME: Initializer provides no value for this binding ele... Remove this comment to see the full error message\r\n  constructor(schemaParserFabric, { typeName, schema, schemaPath } = {}) {\r\n    this.schemaParserFabric = schemaParserFabric;\r\n    this.config = schemaParserFabric.config;\r\n    this.templatesWorker = schemaParserFabric.templatesWorker;\r\n    this.schemaComponentsMap = schemaParserFabric.schemaComponentsMap;\r\n    this.typeNameFormatter = schemaParserFabric.typeNameFormatter;\r\n    this.schemaWalker = schemaParserFabric.schemaWalker;\r\n    this.schemaFormatters = schemaParserFabric.schemaFormatters;\r\n    this.schemaUtils = schemaParserFabric.schemaUtils;\r\n\r\n    this.typeName = typeName || null;\r\n    this.schema = schema;\r\n    this.schemaPath = [...(schemaPath || [])];\r\n  }\r\n\r\n  _complexSchemaParsers = {\r\n    [SCHEMA_TYPES.COMPLEX_ONE_OF]: (schema) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.complexOneOf || OneOfSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        null,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.COMPLEX_ALL_OF]: (schema) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.complexAllOf || AllOfSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        null,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.COMPLEX_ANY_OF]: (schema) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.complexAnyOf || AnyOfSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        null,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.COMPLEX_NOT]: (schema) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.complexNot || NotSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        null,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n  };\r\n\r\n  _baseSchemaParsers = {\r\n    [SCHEMA_TYPES.ENUM]: (schema, typeName) => {\r\n      const SchemaParser = this.config.schemaParsers.enum || EnumSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.OBJECT]: (schema, typeName) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.object || ObjectSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.COMPLEX]: (schema, typeName) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.complex || ComplexSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.PRIMITIVE]: (schema, typeName) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.primitive || PrimitiveSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.DISCRIMINATOR]: (schema, typeName) => {\r\n      const SchemaParser =\r\n        this.config.schemaParsers.discriminator || DiscriminatorSchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n    [SCHEMA_TYPES.ARRAY]: (schema, typeName) => {\r\n      const SchemaParser = this.config.schemaParsers.array || ArraySchemaParser;\r\n      const schemaParser = new SchemaParser(\r\n        this,\r\n        schema,\r\n        typeName,\r\n        this.schemaPath,\r\n      );\r\n      return schemaParser.parse();\r\n    },\r\n  };\r\n\r\n  parseSchema = () => {\r\n    if (!this.schema)\r\n      return this._baseSchemaParsers[SCHEMA_TYPES.PRIMITIVE](\r\n        null,\r\n        this.typeName,\r\n      );\r\n\r\n    let schemaType = null;\r\n    let parsedSchema = null;\r\n\r\n    if (typeof this.schema === \"string\") {\r\n      return this.schema;\r\n    }\r\n\r\n    if (!this.schema.$parsed) {\r\n      if (!this.typeName && this.schemaUtils.isRefSchema(this.schema)) {\r\n        this.typeName = this.schemaUtils.getSchemaType(this.schema);\r\n      }\r\n\r\n      //#region swagger schemas fixes\r\n\r\n      // schema has items but don't have array type\r\n      if (\r\n        this.schema.items &&\r\n        !Array.isArray(this.schema.items) &&\r\n        !this.schema.type\r\n      ) {\r\n        this.schema.type = SCHEMA_TYPES.ARRAY;\r\n      }\r\n      // schema is enum with one null value\r\n      if (\r\n        Array.isArray(this.schema.enum) &&\r\n        this.schema.enum.length === 1 &&\r\n        this.schema.enum[0] == null\r\n      ) {\r\n        consola.debug(\"invalid enum schema\", this.schema);\r\n        this.schema = { type: this.config.Ts.Keyword.Null };\r\n      }\r\n      // schema is response schema\r\n      if (\"content\" in this.schema && typeof this.schema.content === \"object\") {\r\n        const schema = this.extractSchemaFromResponseStruct(this.schema);\r\n        const schemaParser = this.schemaParserFabric.createSchemaParser({\r\n          schema,\r\n          typeName: this.typeName,\r\n          schemaPath: this.schemaPath,\r\n        });\r\n        this.schema.$parsed = schemaParser.parseSchema();\r\n        return this.schema.$parsed;\r\n      }\r\n\r\n      //#endregion\r\n\r\n      schemaType = this.schemaUtils.getInternalSchemaType(this.schema);\r\n\r\n      this.schemaPath.push(this.typeName);\r\n\r\n      lodash.merge(\r\n        this.schema,\r\n        this.config.hooks.onPreParseSchema(\r\n          this.schema,\r\n          this.typeName,\r\n          schemaType,\r\n        ),\r\n      );\r\n      parsedSchema = this._baseSchemaParsers[schemaType](\r\n        this.schema,\r\n        this.typeName,\r\n      );\r\n      this.schema.$parsed =\r\n        this.config.hooks.onParseSchema(this.schema, parsedSchema) ||\r\n        parsedSchema;\r\n\r\n      if (\r\n        this.config.sortTypes &&\r\n        Array.isArray(this.schema.$parsed?.content)\r\n      ) {\r\n        this.schema.$parsed.content = this.schema.$parsed.content.sort(\r\n          sortByProperty(\"name\"),\r\n        );\r\n      }\r\n    }\r\n\r\n    this.schemaPath.pop();\r\n\r\n    return this.schema.$parsed;\r\n  };\r\n\r\n  getInlineParseContent = () => {\r\n    const parsedSchema = this.parseSchema();\r\n    const formattedSchema = this.schemaFormatters.formatSchema(\r\n      parsedSchema,\r\n      \"inline\",\r\n    );\r\n    return formattedSchema.content;\r\n  };\r\n\r\n  getParseContent = () => {\r\n    const parsedSchema = this.parseSchema();\r\n    const formattedSchema = this.schemaFormatters.formatSchema(\r\n      parsedSchema,\r\n      \"base\",\r\n    );\r\n    return formattedSchema.content;\r\n  };\r\n\r\n  extractSchemaFromResponseStruct = (responseStruct) => {\r\n    const { content, ...extras } = responseStruct;\r\n\r\n    const firstResponse = lodash.first(lodash.values(content));\r\n    const firstSchema = lodash.get(firstResponse, \"schema\");\r\n\r\n    if (!firstSchema) return;\r\n\r\n    return {\r\n      ...extras,\r\n      ...lodash.omit(firstResponse, \"schema\"),\r\n      ...firstSchema,\r\n    };\r\n  };\r\n}\r\n","export const sortByProperty =\r\n  (propertyName: string) =>\r\n  (o1: Record<string, any>, o2: Record<string, any>): 1 | -1 | 0 => {\r\n    if (o1[propertyName] > o2[propertyName]) {\r\n      return 1;\r\n    }\r\n    if (o1[propertyName] < o2[propertyName]) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  };\r\n","import type { CodeGenConfig } from \"../configuration.js\";\r\nimport type { SchemaComponentsMap } from \"../schema-components-map.js\";\r\nimport type { TypeNameFormatter } from \"../type-name-formatter.js\";\r\nimport type { SchemaFormatters } from \"./schema-formatters.js\";\r\nimport type { SchemaParserFabric } from \"./schema-parser-fabric.js\";\r\nimport type { SchemaParser } from \"./schema-parser.js\";\r\nimport type { SchemaUtils } from \"./schema-utils.js\";\r\n\r\nexport class MonoSchemaParser {\r\n  schema;\r\n  typeName;\r\n  schemaPath;\r\n\r\n  schemaParser: SchemaParser;\r\n  schemaParserFabric: SchemaParserFabric;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  schemaUtils: SchemaUtils;\r\n  config: CodeGenConfig;\r\n  schemaFormatters: SchemaFormatters;\r\n\r\n  constructor(\r\n    schemaParser: SchemaParser,\r\n    schema,\r\n    typeName = null,\r\n    schemaPath = [],\r\n  ) {\r\n    this.schemaParser = schemaParser;\r\n    this.schemaParserFabric = schemaParser.schemaParserFabric;\r\n    this.schema = schema;\r\n    this.typeName = typeName;\r\n    this.typeNameFormatter = schemaParser.typeNameFormatter;\r\n    this.schemaPath = schemaPath;\r\n    this.schemaComponentsMap = this.schemaParser.schemaComponentsMap;\r\n    this.schemaUtils = this.schemaParser.schemaUtils;\r\n    this.config = this.schemaParser.config;\r\n    this.schemaFormatters = this.schemaParser.schemaFormatters;\r\n  }\r\n\r\n  parse() {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  buildTypeNameFromPath = () => {\r\n    return this.schemaUtils.buildTypeNameFromPath(this.schemaPath);\r\n  };\r\n}\r\n","import { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class ArraySchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    let contentType;\r\n    const { type, description, items } = this.schema || {};\r\n\r\n    if (Array.isArray(items) && type === SCHEMA_TYPES.ARRAY) {\r\n      const tupleContent = [];\r\n      for (const item of items) {\r\n        tupleContent.push(\r\n          this.schemaParserFabric\r\n            .createSchemaParser({ schema: item, schemaPath: this.schemaPath })\r\n            .getInlineParseContent(),\r\n        );\r\n      }\r\n      contentType = this.config.Ts.Tuple(tupleContent);\r\n    } else {\r\n      const content = this.schemaParserFabric\r\n        .createSchemaParser({ schema: items, schemaPath: this.schemaPath })\r\n        .getInlineParseContent();\r\n      contentType = this.config.Ts.ArrayType(content);\r\n    }\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $schemaPath: this.schemaPath.slice(),\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.PRIMITIVE,\r\n      type: SCHEMA_TYPES.PRIMITIVE,\r\n      typeIdentifier: this.config.Ts.Keyword.Type,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(description),\r\n      content: this.schemaUtils.safeAddNullToType(this.schema, contentType),\r\n    };\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\nimport { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class ComplexSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const complexType = this.schemaUtils.getComplexType(this.schema);\r\n    const simpleSchema = lodash.omit(\r\n      lodash.clone(this.schema),\r\n      lodash.keys(this.schemaParser._complexSchemaParsers),\r\n    );\r\n    const complexSchemaContent = this.schemaParser._complexSchemaParsers[\r\n      complexType\r\n    ](this.schema);\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $schemaPath: this.schemaPath.slice(),\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.COMPLEX,\r\n      type: SCHEMA_TYPES.PRIMITIVE,\r\n      typeIdentifier: this.config.Ts.Keyword.Type,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(\r\n        this.schema.description ||\r\n          lodash.compact(\r\n            lodash.map(this.schema[complexType], \"description\"),\r\n          )[0] ||\r\n          \"\",\r\n      ),\r\n      content:\r\n        this.config.Ts.IntersectionType(\r\n          lodash.compact([\r\n            this.config.Ts.ExpressionGroup(complexSchemaContent),\r\n            this.schemaUtils.getInternalSchemaType(simpleSchema) ===\r\n              SCHEMA_TYPES.OBJECT &&\r\n              this.config.Ts.ExpressionGroup(\r\n                this.schemaParserFabric\r\n                  .createSchemaParser({\r\n                    schema: simpleSchema,\r\n                    schemaPath: this.schemaPath,\r\n                  })\r\n                  .getInlineParseContent(),\r\n              ),\r\n          ]),\r\n        ) || this.config.Ts.Keyword.Any,\r\n    };\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\nimport { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class DiscriminatorSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const ts = this.config.Ts;\r\n    const { discriminator, ...noDiscriminatorSchema } = this.schema;\r\n\r\n    if (!discriminator.mapping) {\r\n      return this.schemaParserFabric\r\n        .createSchemaParser({\r\n          schema: noDiscriminatorSchema,\r\n          typeName: this.typeName,\r\n          schemaPath: this.schemaPath,\r\n        })\r\n        .parseSchema();\r\n    }\r\n\r\n    // https://github.com/acacode/swagger-typescript-api/issues/456\r\n    // const skipMappingType = !!noDiscriminatorSchema.oneOf;\r\n    const skipMappingType = false;\r\n\r\n    const abstractSchemaStruct = this.createAbstractSchemaStruct();\r\n    // const complexSchemaStruct = this.createComplexSchemaStruct();\r\n    const discriminatorSchemaStruct = this.createDiscriminatorSchema({\r\n      skipMappingType,\r\n      abstractSchemaStruct,\r\n    });\r\n\r\n    const schemaContent = ts.IntersectionType(\r\n      [\r\n        abstractSchemaStruct?.content,\r\n        discriminatorSchemaStruct?.content,\r\n      ].filter(Boolean),\r\n    );\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $schemaPath: this.schemaPath.slice(),\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.COMPLEX,\r\n      type: SCHEMA_TYPES.PRIMITIVE,\r\n      typeIdentifier: ts.Keyword.Type,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(\r\n        this.schema.description,\r\n      ),\r\n      content: schemaContent,\r\n    };\r\n  }\r\n\r\n  createDiscriminatorSchema = ({ skipMappingType, abstractSchemaStruct }) => {\r\n    const ts = this.config.Ts;\r\n\r\n    const refPath = this.schemaComponentsMap.createRef([\r\n      \"components\",\r\n      \"schemas\",\r\n      this.typeName,\r\n    ]);\r\n    const { discriminator } = this.schema;\r\n    const mappingEntries = lodash.entries(discriminator.mapping);\r\n    const ableToCreateMappingType =\r\n      !skipMappingType &&\r\n      !!(abstractSchemaStruct?.typeName && mappingEntries.length);\r\n    const mappingContents = [];\r\n    let mappingTypeName;\r\n\r\n    /** { mapping_key: SchemaEnum.MappingKey, ... } */\r\n    const mappingPropertySchemaEnumKeysMap =\r\n      this.createMappingPropertySchemaEnumKeys({\r\n        abstractSchemaStruct,\r\n        discPropertyName: discriminator.propertyName,\r\n      });\r\n\r\n    if (ableToCreateMappingType) {\r\n      const rawTypeName = `${abstractSchemaStruct.typeName}_${discriminator.propertyName}`;\r\n      const generatedTypeName = this.schemaUtils.resolveTypeName(rawTypeName, {\r\n        suffixes: this.config.extractingOptions.discriminatorMappingSuffix,\r\n        resolver:\r\n          this.config.extractingOptions.discriminatorMappingNameResolver,\r\n      });\r\n\r\n      const content = ts.IntersectionType([\r\n        ts.ObjectWrapper(\r\n          ts.TypeField({\r\n            key: ts.StringValue(discriminator.propertyName),\r\n            value: \"Key\",\r\n          }),\r\n        ),\r\n        \"Type\",\r\n      ]);\r\n\r\n      const component = this.schemaParserFabric.createParsedComponent({\r\n        typeName: generatedTypeName,\r\n        schema: {\r\n          type: \"object\",\r\n          properties: {},\r\n          genericArgs: [{ name: \"Key\" }, { name: \"Type\" }],\r\n          internal: true,\r\n        },\r\n      });\r\n\r\n      component.typeData.content = content;\r\n\r\n      mappingTypeName = this.typeNameFormatter.format(component.typeName);\r\n    }\r\n\r\n    /** returns (GenericType<\"mapping_key\", MappingType>) or ({ discriminatorProperty: \"mapping_key\" } & MappingType) */\r\n    const createMappingContent = (mappingSchema, mappingKey) => {\r\n      const content = this.schemaParserFabric\r\n        .createSchemaParser({\r\n          schema: mappingSchema,\r\n          schemaPath: this.schemaPath,\r\n        })\r\n        .getInlineParseContent();\r\n\r\n      const mappingUsageKey =\r\n        mappingPropertySchemaEnumKeysMap[mappingKey] ||\r\n        ts.StringValue(mappingKey);\r\n\r\n      if (ableToCreateMappingType) {\r\n        return ts.TypeWithGeneric(mappingTypeName, [mappingUsageKey, content]);\r\n      }\r\n\r\n      return ts.ExpressionGroup(\r\n        ts.IntersectionType([\r\n          ts.ObjectWrapper(\r\n            ts.TypeField({\r\n              key: discriminator.propertyName,\r\n              value: mappingUsageKey,\r\n            }),\r\n          ),\r\n          content,\r\n        ]),\r\n      );\r\n    };\r\n\r\n    for (const [mappingKey, schema] of mappingEntries) {\r\n      const mappingSchema =\r\n        typeof schema === \"string\" ? { $ref: schema } : schema;\r\n\r\n      this.mutateMappingDependentSchema({\r\n        discPropertyName: discriminator.propertyName,\r\n        abstractSchemaStruct,\r\n        mappingSchema,\r\n        refPath,\r\n        mappingPropertySchemaEnumKeysMap,\r\n      });\r\n\r\n      mappingContents.push(createMappingContent(mappingSchema, mappingKey));\r\n    }\r\n\r\n    if (skipMappingType) return null;\r\n\r\n    const content = ts.ExpressionGroup(ts.UnionType(mappingContents));\r\n\r\n    return {\r\n      content,\r\n    };\r\n  };\r\n\r\n  createMappingPropertySchemaEnumKeys = ({\r\n    abstractSchemaStruct,\r\n    discPropertyName,\r\n  }) => {\r\n    const ts = this.config.Ts;\r\n\r\n    let mappingPropertySchemaEnumKeysMap = {};\r\n    let mappingPropertySchema = lodash.get(\r\n      abstractSchemaStruct?.component?.rawTypeData,\r\n      [\"properties\", discPropertyName],\r\n    );\r\n    if (this.schemaUtils.isRefSchema(mappingPropertySchema)) {\r\n      mappingPropertySchema = this.schemaUtils.getSchemaRefType(\r\n        mappingPropertySchema,\r\n      );\r\n    }\r\n\r\n    if (\r\n      mappingPropertySchema?.rawTypeData?.$parsed?.type === SCHEMA_TYPES.ENUM\r\n    ) {\r\n      mappingPropertySchemaEnumKeysMap = lodash.reduce(\r\n        mappingPropertySchema.rawTypeData.$parsed.enum,\r\n        (acc, key, index) => {\r\n          const enumKey =\r\n            mappingPropertySchema.rawTypeData.$parsed.content[index].key;\r\n          acc[key] = ts.EnumUsageKey(\r\n            mappingPropertySchema.rawTypeData.$parsed.typeName,\r\n            enumKey,\r\n          );\r\n          return acc;\r\n        },\r\n        {},\r\n      );\r\n    }\r\n\r\n    return mappingPropertySchemaEnumKeysMap;\r\n  };\r\n\r\n  mutateMappingDependentSchema = ({\r\n    discPropertyName,\r\n    abstractSchemaStruct,\r\n    mappingSchema,\r\n    refPath,\r\n    mappingPropertySchemaEnumKeysMap,\r\n  }) => {\r\n    const complexSchemaKeys = lodash.keys(\r\n      this.schemaParser._complexSchemaParsers,\r\n    );\r\n    // override parent dependencies\r\n    if (mappingSchema.$ref && abstractSchemaStruct?.component?.$ref) {\r\n      const mappingRefSchema =\r\n        this.schemaUtils.getSchemaRefType(mappingSchema)?.rawTypeData;\r\n      if (mappingRefSchema) {\r\n        for (const schemaKey of complexSchemaKeys) {\r\n          if (Array.isArray(mappingRefSchema[schemaKey])) {\r\n            mappingRefSchema[schemaKey] = mappingRefSchema[schemaKey].map(\r\n              (schema) => {\r\n                if (schema.$ref === refPath) {\r\n                  return {\r\n                    ...schema,\r\n                    $ref: abstractSchemaStruct.component.$ref,\r\n                  };\r\n                }\r\n                if (\r\n                  this.schemaUtils.getInternalSchemaType(schema) ===\r\n                  SCHEMA_TYPES.OBJECT\r\n                ) {\r\n                  for (const schemaPropertyName in schema.properties) {\r\n                    const schemaProperty =\r\n                      schema.properties[schemaPropertyName];\r\n                    if (\r\n                      schemaPropertyName === discPropertyName &&\r\n                      this.schemaUtils.getInternalSchemaType(schemaProperty) ===\r\n                        SCHEMA_TYPES.ENUM &&\r\n                      schemaProperty.enum.length === 1 &&\r\n                      mappingPropertySchemaEnumKeysMap[schemaProperty.enum[0]]\r\n                    ) {\r\n                      schema.properties[schemaPropertyName] =\r\n                        this.schemaParserFabric.createSchema({\r\n                          content:\r\n                            mappingPropertySchemaEnumKeysMap[\r\n                              schemaProperty.enum[0]\r\n                            ],\r\n                        });\r\n                    }\r\n                  }\r\n                }\r\n                return schema;\r\n              },\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  createAbstractSchemaStruct = () => {\r\n    const { discriminator, ...noDiscriminatorSchema } = this.schema;\r\n    const complexSchemaKeys = lodash.keys(\r\n      this.schemaParser._complexSchemaParsers,\r\n    );\r\n    const schema = lodash.omit(\r\n      structuredClone(noDiscriminatorSchema),\r\n      complexSchemaKeys,\r\n    );\r\n    const schemaIsAny =\r\n      this.schemaParserFabric.getInlineParseContent(structuredClone(schema)) ===\r\n      this.config.Ts.Keyword.Any;\r\n    const schemaIsEmpty = !lodash.keys(schema).length;\r\n\r\n    if (schemaIsEmpty || schemaIsAny) return null;\r\n\r\n    const typeName = this.schemaUtils.resolveTypeName(this.typeName, {\r\n      prefixes: this.config.extractingOptions.discriminatorAbstractPrefix,\r\n      resolver: this.config.extractingOptions.discriminatorAbstractResolver,\r\n    });\r\n    const component = this.schemaComponentsMap.createComponent(\r\n      this.schemaComponentsMap.createRef([\"components\", \"schemas\", typeName]),\r\n      {\r\n        ...schema,\r\n        internal: true,\r\n      },\r\n    );\r\n    const content = this.schemaParserFabric\r\n      .createSchemaParser({ schema: component, schemaPath: this.schemaPath })\r\n      .getInlineParseContent();\r\n\r\n    return {\r\n      typeName,\r\n      component,\r\n      content,\r\n    };\r\n  };\r\n\r\n  createComplexSchemaStruct = () => {\r\n    const ts = this.config.Ts;\r\n    const complexType = this.schemaUtils.getComplexType(this.schema);\r\n\r\n    if (complexType === SCHEMA_TYPES.COMPLEX_UNKNOWN) return null;\r\n\r\n    return {\r\n      content: ts.ExpressionGroup(\r\n        this.schemaParser._complexSchemaParsers[complexType](this.schema),\r\n      ),\r\n    };\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport type { CodeGenConfig } from \"../../configuration.js\";\r\nimport { NameResolver } from \"../../util/name-resolver.js\";\r\n\r\nexport class EnumKeyResolver extends NameResolver {\r\n  counter = 1;\r\n  constructor(config: CodeGenConfig, reservedNames: string[]) {\r\n    super(config, reservedNames, (variants) => {\r\n      const generatedVariant =\r\n        (variants[0] && `${variants[0]}${this.counter++}`) ||\r\n        `${this.config.enumKeyResolverName}${this.counter++}`;\r\n      consola.debug(\r\n        \"generated fallback type name for enum key - \",\r\n        generatedVariant,\r\n      );\r\n      return generatedVariant;\r\n    });\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\nimport { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\nimport { EnumKeyResolver } from \"../util/enum-key-resolver.js\";\r\n\r\nexport class EnumSchemaParser extends MonoSchemaParser {\r\n  enumKeyResolver: EnumKeyResolver;\r\n\r\n  constructor(...args) {\r\n    // @ts-expect-error TS(2556) FIXME: A spread argument must either have a tuple type or... Remove this comment to see the full error message\r\n    super(...args);\r\n    this.enumKeyResolver = new EnumKeyResolver(this.config, []);\r\n  }\r\n\r\n  extractEnum = (pathTypeName) => {\r\n    const generatedTypeName = this.schemaUtils.resolveTypeName(pathTypeName, {\r\n      suffixes: this.config.extractingOptions.enumSuffix,\r\n      resolver: this.config.extractingOptions.enumNameResolver,\r\n    });\r\n    const customComponent = this.schemaComponentsMap.createComponent(\r\n      this.schemaComponentsMap.createRef([\r\n        \"components\",\r\n        \"schemas\",\r\n        generatedTypeName,\r\n      ]),\r\n      {\r\n        ...this.schema,\r\n      },\r\n    );\r\n    return this.schemaParserFabric.parseSchema(customComponent);\r\n  };\r\n\r\n  override parse() {\r\n    const pathTypeName = this.buildTypeNameFromPath();\r\n\r\n    if (this.config.extractEnums && !this.typeName && pathTypeName != null) {\r\n      return this.extractEnum(pathTypeName);\r\n    }\r\n\r\n    const refType = this.schemaUtils.getSchemaRefType(this.schema);\r\n    const $ref = refType?.$ref || null;\r\n\r\n    // fix schema when enum has length 1+ but value is []\r\n    if (Array.isArray(this.schema.enum)) {\r\n      this.schema.enum = this.schema.enum.filter((key) => key != null);\r\n    }\r\n\r\n    if (Array.isArray(this.schema.enum) && Array.isArray(this.schema.enum[0])) {\r\n      return this.schemaParserFabric.parseSchema(\r\n        {\r\n          oneOf: this.schema.enum.map((enumNames) => ({\r\n            type: \"array\",\r\n            items: enumNames.map((enumName) => ({\r\n              type: \"string\",\r\n              enum: [enumName],\r\n            })),\r\n          })),\r\n        },\r\n        this.typeName,\r\n        this.schemaPath,\r\n      );\r\n    }\r\n\r\n    const keyType = this.schemaUtils.getSchemaType(this.schema);\r\n    const enumNames = this.schemaUtils.getEnumNames(this.schema);\r\n    let content = null;\r\n\r\n    const formatValue = (value) => {\r\n      if (value === null) {\r\n        return this.config.Ts.NullValue(value);\r\n      }\r\n      if (\r\n        keyType.includes(this.schemaUtils.getSchemaType({ type: \"number\" }))\r\n      ) {\r\n        return this.config.Ts.NumberValue(value);\r\n      }\r\n      if (\r\n        keyType.includes(this.schemaUtils.getSchemaType({ type: \"boolean\" }))\r\n      ) {\r\n        return this.config.Ts.BooleanValue(value);\r\n      }\r\n\r\n      return this.config.Ts.StringValue(value);\r\n    };\r\n\r\n    if (Array.isArray(enumNames) && lodash.size(enumNames)) {\r\n      content = enumNames.map((enumName, index) => {\r\n        const enumValue = lodash.get(this.schema.enum, index);\r\n        const formattedKey = this.formatEnumKey({\r\n          key: enumName,\r\n          value: enumValue,\r\n        });\r\n\r\n        if (this.config.enumNamesAsValues || enumValue === undefined) {\r\n          return {\r\n            key: formattedKey,\r\n            type: this.config.Ts.Keyword.String,\r\n            value: this.config.Ts.StringValue(enumName),\r\n          };\r\n        }\r\n\r\n        return {\r\n          key: formattedKey,\r\n          type: keyType,\r\n          value: formatValue(enumValue),\r\n        };\r\n      });\r\n    } else {\r\n      content = this.schema.enum.map((value) => {\r\n        return {\r\n          // @ts-expect-error TS(2345) FIXME: Argument of type '{ value: any; }' is not assignab... Remove this comment to see the full error message\r\n          key: this.formatEnumKey({ value }),\r\n          type: keyType,\r\n          value: formatValue(value),\r\n        };\r\n      });\r\n    }\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $ref: $ref,\r\n      typeName: this.typeName || ($ref && refType.typeName) || null,\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.ENUM,\r\n      type: SCHEMA_TYPES.ENUM,\r\n      keyType: keyType,\r\n      typeIdentifier: this.config.generateUnionEnums\r\n        ? this.config.Ts.Keyword.Type\r\n        : this.config.Ts.Keyword.Enum,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(\r\n        this.schema.description,\r\n      ),\r\n      content,\r\n    };\r\n  }\r\n\r\n  formatEnumKey = ({ key, value }) => {\r\n    let formatted;\r\n\r\n    if (key) {\r\n      formatted = this.typeNameFormatter.format(key, {\r\n        type: \"enum-key\",\r\n      });\r\n    }\r\n\r\n    if (!formatted) {\r\n      formatted = this.typeNameFormatter.format(`${value}`, {\r\n        type: \"enum-key\",\r\n      });\r\n    }\r\n\r\n    return this.enumKeyResolver.resolve([formatted]);\r\n  };\r\n}\r\n","import lodash from \"lodash\";\r\nimport { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class ObjectSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const contentProperties = this.getObjectSchemaContent(this.schema);\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $schemaPath: this.schemaPath.slice(),\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.OBJECT,\r\n      type: SCHEMA_TYPES.OBJECT,\r\n      typeIdentifier: this.config.Ts.Keyword.Interface,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(\r\n        this.schema.description,\r\n      ),\r\n      allFieldsAreOptional: !contentProperties.some((part) => part.isRequired),\r\n      content: contentProperties,\r\n    };\r\n  }\r\n\r\n  getObjectSchemaContent = (schema) => {\r\n    const { properties, additionalProperties } = schema || {};\r\n\r\n    const propertiesContent = lodash.map(properties, (property, name) => {\r\n      const required = this.schemaUtils.isPropertyRequired(\r\n        name,\r\n        property,\r\n        schema,\r\n      );\r\n      const rawTypeData = lodash.get(\r\n        this.schemaUtils.getSchemaRefType(property),\r\n        \"rawTypeData\",\r\n        {},\r\n      );\r\n      const nullable = !!(rawTypeData.nullable || property.nullable);\r\n      const fieldName = this.typeNameFormatter.isValidName(name)\r\n        ? name\r\n        : this.config.Ts.StringValue(name);\r\n      const fieldValue = this.schemaParserFabric\r\n        .createSchemaParser({\r\n          schema: property,\r\n          schemaPath: [...this.schemaPath, name],\r\n        })\r\n        .getInlineParseContent();\r\n      const readOnly = property.readOnly;\r\n\r\n      return {\r\n        ...property,\r\n        $$raw: property,\r\n        title: property.title,\r\n        description:\r\n          property.description ||\r\n          lodash.compact(\r\n            lodash.map(\r\n              property[this.schemaUtils.getComplexType(property)],\r\n              \"description\",\r\n            ),\r\n          )[0] ||\r\n          rawTypeData.description ||\r\n          lodash.compact(\r\n            lodash.map(\r\n              rawTypeData[this.schemaUtils.getComplexType(rawTypeData)],\r\n              \"description\",\r\n            ),\r\n          )[0] ||\r\n          \"\",\r\n        isRequired: required,\r\n        isNullable: nullable,\r\n        name: fieldName,\r\n        value: fieldValue,\r\n        field: this.config.Ts.TypeField({\r\n          readonly: readOnly && this.config.addReadonly,\r\n          optional: !required,\r\n          key: fieldName,\r\n          value: fieldValue,\r\n        }),\r\n      };\r\n    });\r\n\r\n    if (additionalProperties) {\r\n      propertiesContent.push({\r\n        $$raw: { additionalProperties },\r\n        description: \"\",\r\n        isRequired: false,\r\n        field: this.config.Ts.InterfaceDynamicField(\r\n          this.config.Ts.Keyword.String,\r\n          this.config.Ts.Keyword.Any,\r\n        ),\r\n      });\r\n    }\r\n\r\n    return propertiesContent;\r\n  };\r\n}\r\n","import { SCHEMA_TYPES } from \"../../constants.js\";\r\nimport { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class PrimitiveSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    let contentType = null;\r\n    const { additionalProperties, type, description, items } =\r\n      this.schema || {};\r\n\r\n    if (type === this.config.Ts.Keyword.Object && additionalProperties) {\r\n      const fieldType =\r\n        typeof additionalProperties === \"object\"\r\n          ? this.schemaParserFabric\r\n              .createSchemaParser({\r\n                schema: additionalProperties,\r\n                schemaPath: this.schemaPath,\r\n              })\r\n              .getInlineParseContent()\r\n          : this.config.Ts.Keyword.Any;\r\n      contentType = this.config.Ts.RecordType(\r\n        this.config.Ts.Keyword.String,\r\n        fieldType,\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(type) && type.length) {\r\n      contentType = this.schemaParser._complexSchemaParsers.oneOf({\r\n        ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n        oneOf: type.map((type) => ({ type })),\r\n      });\r\n    }\r\n\r\n    if (Array.isArray(items) && type === SCHEMA_TYPES.ARRAY) {\r\n      contentType = this.config.Ts.Tuple(\r\n        items.map((item) =>\r\n          this.schemaParserFabric\r\n            .createSchemaParser({ schema: item, schemaPath: this.schemaPath })\r\n            .getInlineParseContent(),\r\n        ),\r\n      );\r\n    }\r\n\r\n    return {\r\n      ...(typeof this.schema === \"object\" ? this.schema : {}),\r\n      $schemaPath: this.schemaPath.slice(),\r\n      $parsedSchema: true,\r\n      schemaType: SCHEMA_TYPES.PRIMITIVE,\r\n      type: SCHEMA_TYPES.PRIMITIVE,\r\n      typeIdentifier: this.config.Ts.Keyword.Type,\r\n      name: this.typeName,\r\n      description: this.schemaFormatters.formatDescription(description),\r\n      // TODO: probably it should be refactored. `type === 'null'` is not flexible\r\n      content:\r\n        type === this.config.Ts.Keyword.Null\r\n          ? type\r\n          : contentType || this.schemaUtils.getSchemaType(this.schema),\r\n    };\r\n  }\r\n}\r\n","import { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\n// T1 & T2\r\nexport class AllOfSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const ignoreTypes = [this.config.Ts.Keyword.Any];\r\n    const combined = this.schema.allOf.map((childSchema) =>\r\n      this.schemaParserFabric.getInlineParseContent(\r\n        this.schemaUtils.makeAddRequiredToChildSchema(this.schema, childSchema),\r\n        null,\r\n        this.schemaPath,\r\n      ),\r\n    );\r\n    const filtered = this.schemaUtils.filterSchemaContents(\r\n      combined,\r\n      (content) => !ignoreTypes.includes(content),\r\n    );\r\n\r\n    const type = this.config.Ts.IntersectionType(filtered);\r\n\r\n    return this.schemaUtils.safeAddNullToType(this.schema, type);\r\n  }\r\n}\r\n","import { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\n// T1 | T2\r\nexport class AnyOfSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const ignoreTypes = [this.config.Ts.Keyword.Any];\r\n    const combined = this.schema.anyOf.map((childSchema) =>\r\n      this.schemaParserFabric.getInlineParseContent(\r\n        this.schemaUtils.makeAddRequiredToChildSchema(this.schema, childSchema),\r\n        null,\r\n        this.schemaPath,\r\n      ),\r\n    );\r\n\r\n    const filtered = this.schemaUtils.filterSchemaContents(\r\n      combined,\r\n      (content) => !ignoreTypes.includes(content),\r\n    );\r\n\r\n    const type = this.config.Ts.UnionType(filtered);\r\n\r\n    return this.schemaUtils.safeAddNullToType(this.schema, type);\r\n  }\r\n}\r\n","import { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\nexport class NotSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    return this.config.Ts.Keyword.Any;\r\n  }\r\n}\r\n","import { MonoSchemaParser } from \"../mono-schema-parser.js\";\r\n\r\n// T1 | T2\r\nexport class OneOfSchemaParser extends MonoSchemaParser {\r\n  override parse() {\r\n    const ignoreTypes = [this.config.Ts.Keyword.Any];\r\n    const combined = this.schema.oneOf.map((childSchema) =>\r\n      this.schemaParserFabric.getInlineParseContent(\r\n        this.schemaUtils.makeAddRequiredToChildSchema(this.schema, childSchema),\r\n        null,\r\n        this.schemaPath,\r\n      ),\r\n    );\r\n\r\n    const filtered = this.schemaUtils.filterSchemaContents(\r\n      combined,\r\n      (content) => !ignoreTypes.includes(content),\r\n    );\r\n\r\n    const type = this.config.Ts.UnionType(filtered);\r\n\r\n    return this.schemaUtils.safeAddNullToType(this.schema, type);\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\n\r\nexport function internalCase(value: string) {\r\n  return lodash.camelCase(lodash.lowerCase(value));\r\n}\r\n","import lodash from \"lodash\";\r\n\r\nexport function pascalCase(value: string) {\r\n  return lodash.upperFirst(lodash.camelCase(value));\r\n}\r\n","import lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\nimport { SCHEMA_TYPES } from \"../constants.js\";\r\nimport type { SchemaComponentsMap } from \"../schema-components-map.js\";\r\nimport type { SchemaWalker } from \"../schema-walker.js\";\r\nimport type { TypeNameFormatter } from \"../type-name-formatter.js\";\r\nimport { internalCase } from \"../util/internal-case.js\";\r\nimport { pascalCase } from \"../util/pascal-case.js\";\r\n\r\nexport class SchemaUtils {\r\n  config: CodeGenConfig;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaWalker: SchemaWalker;\r\n\r\n  constructor({\r\n    config,\r\n    schemaComponentsMap,\r\n    typeNameFormatter,\r\n    schemaWalker,\r\n  }) {\r\n    this.config = config;\r\n    this.schemaComponentsMap = schemaComponentsMap;\r\n    this.typeNameFormatter = typeNameFormatter;\r\n    this.schemaWalker = schemaWalker;\r\n  }\r\n\r\n  getRequiredProperties = (schema) => {\r\n    return lodash.uniq(\r\n      (schema && Array.isArray(schema.required) && schema.required) || [],\r\n    );\r\n  };\r\n\r\n  isRefSchema = (schema) => {\r\n    return !!schema?.$ref;\r\n  };\r\n\r\n  getEnumNames = (schema) => {\r\n    return (\r\n      schema[\"x-enumNames\"] ||\r\n      schema.xEnumNames ||\r\n      schema[\"x-enumnames\"] ||\r\n      schema[\"x-enum-varnames\"]\r\n    );\r\n  };\r\n\r\n  getSchemaRefType = (schema) => {\r\n    if (!this.isRefSchema(schema)) return null;\r\n    return this.schemaComponentsMap.get(schema.$ref);\r\n  };\r\n\r\n  isPropertyRequired = (name, propertySchema, rootSchema) => {\r\n    if (propertySchema[\"x-omitempty\"] === false) {\r\n      return true;\r\n    }\r\n\r\n    const isRequired =\r\n      typeof propertySchema.required === \"boolean\"\r\n        ? !!propertySchema.required\r\n        : Array.isArray(rootSchema.required)\r\n          ? rootSchema.required.includes(name)\r\n          : !!rootSchema.required;\r\n\r\n    if (this.config.convertedFromSwagger2) {\r\n      return typeof propertySchema.nullable === this.config.Ts.Keyword.Undefined\r\n        ? isRequired\r\n        : !propertySchema.nullable;\r\n    }\r\n    return isRequired;\r\n  };\r\n\r\n  isNullMissingInType = (schema, type) => {\r\n    const { nullable, type: schemaType } = schema || {};\r\n    return (\r\n      (nullable ||\r\n        !!lodash.get(schema, \"x-nullable\") ||\r\n        schemaType === this.config.Ts.Keyword.Null) &&\r\n      typeof type === \"string\" &&\r\n      !type.includes(` ${this.config.Ts.Keyword.Null}`) &&\r\n      !type.includes(`${this.config.Ts.Keyword.Null} `)\r\n    );\r\n  };\r\n\r\n  safeAddNullToType = (schema, type) => {\r\n    if (this.isNullMissingInType(schema, type)) {\r\n      return this.config.Ts.UnionType([type, this.config.Ts.Keyword.Null]);\r\n    }\r\n    return type;\r\n  };\r\n\r\n  getSchemaPrimitiveType = (rawSchema) => {\r\n    const schema = rawSchema || {};\r\n\r\n    if (schema.type) {\r\n      return internalCase(schema.type);\r\n    }\r\n    if (schema.enum) {\r\n      const enumFieldType = typeof schema.enum[0];\r\n      if (enumFieldType === this.config.Ts.Keyword.Undefined) return;\r\n\r\n      return internalCase(enumFieldType);\r\n    }\r\n    if (lodash.keys(schema.properties).length) {\r\n      return SCHEMA_TYPES.OBJECT;\r\n    }\r\n    if (schema.items) {\r\n      return SCHEMA_TYPES.ARRAY;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  checkAndAddRequiredKeys = (schema, resultType) => {\r\n    if (\"$$requiredKeys\" in schema && schema.$$requiredKeys.length) {\r\n      this.config.update({\r\n        internalTemplateOptions: {\r\n          addUtilRequiredKeysType: true,\r\n        },\r\n      });\r\n      return this.config.Ts.TypeWithGeneric(\r\n        this.config.Ts.CodeGenKeyword.UtilRequiredKeys,\r\n        [\r\n          resultType,\r\n          this.config.Ts.UnionType(\r\n            schema.$$requiredKeys.map(this.config.Ts.StringValue),\r\n          ),\r\n        ],\r\n      );\r\n    }\r\n\r\n    return resultType;\r\n  };\r\n\r\n  makeAddRequiredToChildSchema = (parentSchema, childSchema) => {\r\n    if (!childSchema) return childSchema;\r\n\r\n    const required = lodash.uniq([\r\n      ...this.getRequiredProperties(parentSchema),\r\n      ...this.getRequiredProperties(childSchema),\r\n    ]);\r\n\r\n    const refData = this.getSchemaRefType(childSchema);\r\n\r\n    if (refData) {\r\n      const refObjectProperties = lodash.keys(\r\n        refData.rawTypeData?.properties || {},\r\n      );\r\n      const existedRequiredKeys = refObjectProperties.filter((key) =>\r\n        required.includes(key),\r\n      );\r\n\r\n      if (!existedRequiredKeys.length) return childSchema;\r\n\r\n      return {\r\n        ...childSchema,\r\n        $$requiredKeys: existedRequiredKeys,\r\n      };\r\n    }\r\n\r\n    if (childSchema.properties) {\r\n      const childSchemaProperties = lodash.keys(childSchema.properties);\r\n      const existedRequiredKeys = childSchemaProperties.filter((key) =>\r\n        required.includes(key),\r\n      );\r\n\r\n      if (!existedRequiredKeys.length) return childSchema;\r\n\r\n      return {\r\n        required: lodash.uniq([\r\n          ...this.getRequiredProperties(childSchema),\r\n          ...existedRequiredKeys,\r\n        ]),\r\n        ...childSchema,\r\n      };\r\n    }\r\n\r\n    return childSchema;\r\n  };\r\n\r\n  filterSchemaContents = (contents, filterFn) => {\r\n    return lodash.uniq(contents.filter((type) => filterFn(type)));\r\n  };\r\n\r\n  resolveTypeName = (\r\n    typeName,\r\n    { suffixes, resolver, prefixes, shouldReserve = true },\r\n  ) => {\r\n    if (resolver) {\r\n      return this.config.componentTypeNameResolver.resolve([], (reserved) => {\r\n        return resolver(pascalCase(typeName), reserved);\r\n      });\r\n    }\r\n\r\n    return this.config.componentTypeNameResolver.resolve(\r\n      [\r\n        ...(prefixes || []).map((prefix) =>\r\n          pascalCase(`${prefix} ${typeName}`),\r\n        ),\r\n        ...(suffixes || []).map((suffix) =>\r\n          pascalCase(`${typeName} ${suffix}`),\r\n        ),\r\n      ],\r\n      shouldReserve,\r\n    );\r\n  };\r\n\r\n  getComplexType = (schema) => {\r\n    if (schema.oneOf) return SCHEMA_TYPES.COMPLEX_ONE_OF;\r\n    if (schema.allOf) return SCHEMA_TYPES.COMPLEX_ALL_OF;\r\n    if (schema.anyOf) return SCHEMA_TYPES.COMPLEX_ANY_OF;\r\n    // TODO :(\r\n    if (schema.not) return SCHEMA_TYPES.COMPLEX_NOT;\r\n\r\n    return SCHEMA_TYPES.COMPLEX_UNKNOWN;\r\n  };\r\n\r\n  getInternalSchemaType = (schema) => {\r\n    if (\r\n      !lodash.isEmpty(schema.enum) ||\r\n      !lodash.isEmpty(this.getEnumNames(schema))\r\n    ) {\r\n      return SCHEMA_TYPES.ENUM;\r\n    }\r\n    if (schema.discriminator) {\r\n      return SCHEMA_TYPES.DISCRIMINATOR;\r\n    }\r\n    if (schema.allOf || schema.oneOf || schema.anyOf || schema.not) {\r\n      return SCHEMA_TYPES.COMPLEX;\r\n    }\r\n    if (!lodash.isEmpty(schema.properties)) {\r\n      return SCHEMA_TYPES.OBJECT;\r\n    }\r\n    if (schema.type === SCHEMA_TYPES.ARRAY) {\r\n      return SCHEMA_TYPES.ARRAY;\r\n    }\r\n\r\n    return SCHEMA_TYPES.PRIMITIVE;\r\n  };\r\n\r\n  getSchemaType = (schema) => {\r\n    if (!schema) return this.config.Ts.Keyword.Any;\r\n\r\n    const refTypeInfo = this.getSchemaRefType(schema);\r\n\r\n    if (refTypeInfo) {\r\n      return this.checkAndAddRequiredKeys(\r\n        schema,\r\n        this.safeAddNullToType(\r\n          schema,\r\n          this.typeNameFormatter.format(refTypeInfo.typeName),\r\n        ),\r\n      );\r\n    }\r\n\r\n    let resultType;\r\n\r\n    if (this.isConstantSchema(schema)) {\r\n      resultType = this.formatJsValue(schema.const);\r\n    } else {\r\n      const primitiveType = this.getSchemaPrimitiveType(schema);\r\n\r\n      if (primitiveType == null) {\r\n        return this.config.Ts.Keyword.Any;\r\n      }\r\n\r\n      const typeAlias =\r\n        lodash.get(this.config.primitiveTypes, [\r\n          primitiveType,\r\n          schema.format,\r\n        ]) ||\r\n        lodash.get(this.config.primitiveTypes, [primitiveType, \"$default\"]) ||\r\n        this.config.primitiveTypes[primitiveType];\r\n\r\n      if (typeof typeAlias === \"function\") {\r\n        resultType = typeAlias(schema, this);\r\n      } else {\r\n        resultType = typeAlias || primitiveType;\r\n      }\r\n    }\r\n\r\n    if (!resultType) {\r\n      return this.config.Ts.Keyword.Any;\r\n    }\r\n\r\n    return this.checkAndAddRequiredKeys(\r\n      schema,\r\n      this.safeAddNullToType(schema, resultType),\r\n    );\r\n  };\r\n\r\n  buildTypeNameFromPath = (schemaPath) => {\r\n    schemaPath = lodash.uniq(lodash.compact(schemaPath));\r\n\r\n    if (!schemaPath || !schemaPath[0]) return null;\r\n\r\n    return pascalCase(\r\n      lodash.camelCase(\r\n        lodash\r\n          .uniq([schemaPath[0], schemaPath[schemaPath.length - 1]])\r\n          .join(\"_\"),\r\n      ),\r\n    );\r\n  };\r\n\r\n  isConstantSchema(schema) {\r\n    return \"const\" in schema;\r\n  }\r\n\r\n  formatJsValue = (value) => {\r\n    switch (typeof value) {\r\n      case \"string\": {\r\n        return this.config.Ts.StringValue(value);\r\n      }\r\n      case \"boolean\": {\r\n        return this.config.Ts.BooleanValue(value);\r\n      }\r\n      case \"number\": {\r\n        return this.config.Ts.NumberValue(value);\r\n      }\r\n      default: {\r\n        if (value === null) {\r\n          return this.config.Ts.NullValue(value);\r\n        }\r\n\r\n        return this.config.Ts.Keyword.Any;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import type {\r\n  ParsedSchema,\r\n  SchemaTypeEnumContent,\r\n  SchemaTypeObjectContent,\r\n  SchemaTypePrimitiveContent,\r\n} from \"../../types/index.js\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\nimport type { SchemaComponentsMap } from \"../schema-components-map.js\";\r\nimport type { SchemaWalker } from \"../schema-walker.js\";\r\nimport type { TemplatesWorker } from \"../templates-worker.js\";\r\nimport type { TypeNameFormatter } from \"../type-name-formatter.js\";\r\nimport { SchemaFormatters } from \"./schema-formatters.js\";\r\nimport { SchemaParser } from \"./schema-parser.js\";\r\nimport { SchemaUtils } from \"./schema-utils.js\";\r\n\r\nexport class SchemaParserFabric {\r\n  config: CodeGenConfig;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaFormatters: SchemaFormatters;\r\n  templatesWorker: TemplatesWorker;\r\n  schemaUtils: SchemaUtils;\r\n  schemaWalker: SchemaWalker;\r\n\r\n  constructor(\r\n    config: CodeGenConfig,\r\n    templatesWorker: TemplatesWorker,\r\n    schemaComponentsMap: SchemaComponentsMap,\r\n    typeNameFormatter: TypeNameFormatter,\r\n    schemaWalker: SchemaWalker,\r\n  ) {\r\n    this.config = config;\r\n    this.schemaComponentsMap = schemaComponentsMap;\r\n    this.typeNameFormatter = typeNameFormatter;\r\n    this.templatesWorker = templatesWorker;\r\n    this.schemaWalker = schemaWalker;\r\n    this.schemaUtils = new SchemaUtils(this);\r\n    this.schemaFormatters = new SchemaFormatters(this);\r\n  }\r\n\r\n  createSchemaParser = ({ schema, typeName, schemaPath }) => {\r\n    return new SchemaParser(this, { schema, typeName, schemaPath });\r\n  };\r\n\r\n  createSchema = ({\r\n    content,\r\n    linkedSchema = {},\r\n    linkedComponent,\r\n    schemaPath,\r\n    ...otherSchemaProps\r\n  }) => {\r\n    // @ts-expect-error TS(2345) FIXME: Argument of type '{ schema: any; schemaPath: any; ... Remove this comment to see the full error message\r\n    const parser = this.createSchemaParser({\r\n      schema: linkedComponent || linkedSchema,\r\n      schemaPath,\r\n    });\r\n    const parsed = parser.parseSchema();\r\n    parsed.content = content;\r\n    Object.assign(parsed, otherSchemaProps);\r\n    if (linkedComponent) {\r\n      linkedComponent.typeData = parsed;\r\n    }\r\n    return parser.schema;\r\n  };\r\n\r\n  createParsedComponent = ({ typeName, schema, schemaPath }) => {\r\n    const schemaCopy = structuredClone(schema);\r\n    const customComponent = this.schemaComponentsMap.createComponent(\r\n      this.schemaComponentsMap.createRef([\"components\", \"schemas\", typeName]),\r\n      schemaCopy,\r\n    );\r\n    const parsed = this.parseSchema(schemaCopy, null, schemaPath);\r\n\r\n    parsed.name = typeName;\r\n    customComponent.typeData = parsed;\r\n\r\n    return customComponent;\r\n  };\r\n\r\n  parseSchema = (\r\n    schema: string,\r\n    typeName: string | null = null,\r\n    schemaPath: string[] = [],\r\n  ): ParsedSchema<\r\n    SchemaTypeObjectContent | SchemaTypeEnumContent | SchemaTypePrimitiveContent\r\n  > => {\r\n    const schemaParser = this.createSchemaParser({\r\n      schema,\r\n      typeName,\r\n      schemaPath,\r\n    });\r\n    return schemaParser.parseSchema();\r\n  };\r\n\r\n  getInlineParseContent = (\r\n    schema: string,\r\n    typeName: string | null,\r\n    schemaPath: string[],\r\n  ): Record<string, any> => {\r\n    const parser = this.createSchemaParser({ schema, typeName, schemaPath });\r\n    return parser.getInlineParseContent();\r\n  };\r\n\r\n  getParseContent = (\r\n    schema: string,\r\n    typeName: string | null,\r\n    schemaPath: string[],\r\n  ): Record<string, any> => {\r\n    const parser = this.createSchemaParser({ schema, typeName, schemaPath });\r\n    return parser.getParseContent();\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport type {\r\n  GenerateApiConfiguration,\r\n  ParsedRoute,\r\n} from \"../../types/index.js\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\nimport {\r\n  DEFAULT_BODY_ARG_NAME,\r\n  RESERVED_BODY_ARG_NAMES,\r\n  RESERVED_HEADER_ARG_NAMES,\r\n  RESERVED_PATH_ARG_NAMES,\r\n  RESERVED_QUERY_ARG_NAMES,\r\n} from \"../constants.js\";\r\nimport type { SchemaComponentsMap } from \"../schema-components-map.js\";\r\nimport type { SchemaParserFabric } from \"../schema-parser/schema-parser-fabric.js\";\r\nimport type { SchemaUtils } from \"../schema-parser/schema-utils.js\";\r\nimport type { TemplatesWorker } from \"../templates-worker.js\";\r\nimport type { TypeNameFormatter } from \"../type-name-formatter.js\";\r\nimport { generateId } from \"../util/id.js\";\r\nimport { SpecificArgNameResolver } from \"./util/specific-arg-name-resolver.js\";\r\n\r\nconst CONTENT_KIND = {\r\n  JSON: \"JSON\",\r\n  URL_ENCODED: \"URL_ENCODED\",\r\n  FORM_DATA: \"FORM_DATA\",\r\n  IMAGE: \"IMAGE\",\r\n  OTHER: \"OTHER\",\r\n  TEXT: \"TEXT\",\r\n};\r\n\r\nexport class SchemaRoutes {\r\n  config: CodeGenConfig;\r\n  schemaParserFabric: SchemaParserFabric;\r\n  schemaUtils: SchemaUtils;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  templatesWorker: TemplatesWorker;\r\n\r\n  FORM_DATA_TYPES: string[] = [];\r\n\r\n  routes: ParsedRoute[] = [];\r\n  hasSecurityRoutes = false;\r\n  hasQueryRoutes = false;\r\n  hasFormDataRoutes = false;\r\n\r\n  constructor(\r\n    config: CodeGenConfig,\r\n    schemaParserFabric: SchemaParserFabric,\r\n    schemaComponentsMap: SchemaComponentsMap,\r\n    templatesWorker: TemplatesWorker,\r\n    typeNameFormatter: TypeNameFormatter,\r\n  ) {\r\n    this.config = config;\r\n    this.schemaParserFabric = schemaParserFabric;\r\n    this.schemaUtils = this.schemaParserFabric.schemaUtils;\r\n    this.typeNameFormatter = typeNameFormatter;\r\n    this.schemaComponentsMap = schemaComponentsMap;\r\n    this.templatesWorker = templatesWorker;\r\n\r\n    this.FORM_DATA_TYPES = lodash.uniq([\r\n      this.schemaUtils.getSchemaType({ type: \"string\", format: \"file\" }),\r\n      this.schemaUtils.getSchemaType({ type: \"string\", format: \"binary\" }),\r\n    ]);\r\n  }\r\n\r\n  createRequestsMap = (routeInfoByMethodsMap) => {\r\n    const parameters = lodash.get(routeInfoByMethodsMap, \"parameters\");\r\n\r\n    return lodash.reduce(\r\n      routeInfoByMethodsMap,\r\n      (acc, requestInfo, method) => {\r\n        if (\r\n          method.startsWith(\"x-\") ||\r\n          [\"parameters\", \"$ref\"].includes(method)\r\n        ) {\r\n          return acc;\r\n        }\r\n\r\n        acc[method] = {\r\n          ...requestInfo,\r\n          parameters: lodash.compact(\r\n            lodash.concat(parameters, requestInfo.parameters),\r\n          ),\r\n        };\r\n\r\n        return acc;\r\n      },\r\n      {},\r\n    );\r\n  };\r\n\r\n  parseRouteName = (originalRouteName) => {\r\n    const routeName =\r\n      this.config.hooks.onPreBuildRoutePath(originalRouteName) ||\r\n      originalRouteName;\r\n\r\n    const pathParamMatches = (routeName || \"\").match(\r\n      /({(([A-z]){1}([a-zA-Z0-9]-?_?\\.?)+)([0-9]+)?})|(:(([A-z]){1}([a-zA-Z0-9]-?_?\\.?)+)([0-9]+)?:?)/g,\r\n    );\r\n\r\n    // used in case when path parameters is not declared in requestInfo.parameters (\"in\": \"path\")\r\n    const pathParams = lodash.reduce(\r\n      pathParamMatches,\r\n      (pathParams, match) => {\r\n        const paramName = match.replace(/\\{|\\}|:/g, \"\");\r\n\r\n        if (!paramName) return pathParams;\r\n\r\n        if (paramName.includes(\"-\")) {\r\n          consola.warn(\"wrong path param name\", paramName);\r\n        }\r\n\r\n        pathParams.push({\r\n          $match: match,\r\n          name: lodash.camelCase(paramName),\r\n          required: true,\r\n          type: \"string\",\r\n          description: \"\",\r\n          schema: {\r\n            type: \"string\",\r\n          },\r\n          in: \"path\",\r\n        });\r\n\r\n        return pathParams;\r\n      },\r\n      [],\r\n    );\r\n\r\n    let fixedRoute = pathParams.reduce((fixedRoute, pathParam, i, arr) => {\r\n      const insertion =\r\n        this.config.hooks.onInsertPathParam(\r\n          pathParam.name,\r\n          i,\r\n          arr,\r\n          fixedRoute,\r\n        ) || pathParam.name;\r\n      return fixedRoute.replace(pathParam.$match, `\\${${insertion}}`);\r\n    }, routeName || \"\");\r\n\r\n    const queryParamMatches = fixedRoute.match(/(\\{\\?.*\\})/g);\r\n    const queryParams = [];\r\n\r\n    if (queryParamMatches?.length) {\r\n      for (const match of queryParamMatches) {\r\n        fixedRoute = fixedRoute.replace(match, \"\");\r\n      }\r\n\r\n      const paramNames = lodash.uniq(\r\n        queryParamMatches\r\n          .join(\",\")\r\n          .replace(/(\\{\\?)|(\\})|\\s/g, \"\")\r\n          .split(\",\"),\r\n      );\r\n\r\n      for (const paramName of paramNames) {\r\n        // @ts-expect-error TS(2339) FIXME: Property 'includes' does not exist on type 'unknow... Remove this comment to see the full error message\r\n        if (paramName.includes(\"-\")) {\r\n          consola.warn(\"wrong query param name\", paramName);\r\n        }\r\n\r\n        queryParams.push({\r\n          $match: paramName,\r\n          // @ts-expect-error TS(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\r\n          name: lodash.camelCase(paramName),\r\n          required: true,\r\n          type: \"string\",\r\n          description: \"\",\r\n          schema: {\r\n            type: \"string\",\r\n          },\r\n          in: \"query\",\r\n        });\r\n      }\r\n    }\r\n\r\n    const result = {\r\n      originalRoute: originalRouteName || \"\",\r\n      route: fixedRoute,\r\n      pathParams,\r\n      queryParams,\r\n    };\r\n\r\n    return this.config.hooks.onBuildRoutePath(result) || result;\r\n  };\r\n\r\n  getRouteParams = (\r\n    routeInfo,\r\n    pathParamsFromRouteName,\r\n    queryParamsFromRouteName,\r\n  ) => {\r\n    const { parameters } = routeInfo;\r\n\r\n    const routeParams = {\r\n      path: [],\r\n      header: [],\r\n      body: [],\r\n      query: [],\r\n      formData: [],\r\n      cookie: [],\r\n    };\r\n\r\n    lodash.each(parameters, (parameter) => {\r\n      const refTypeInfo =\r\n        this.schemaParserFabric.schemaUtils.getSchemaRefType(parameter);\r\n      let routeParam = null;\r\n\r\n      if (refTypeInfo?.rawTypeData.in && refTypeInfo.rawTypeData) {\r\n        if (!routeParams[refTypeInfo.rawTypeData.in]) {\r\n          routeParams[refTypeInfo.rawTypeData.in] = [];\r\n        }\r\n\r\n        routeParam = {\r\n          ...refTypeInfo.rawTypeData,\r\n          ...(refTypeInfo.rawTypeData.schema || {}),\r\n        };\r\n      } else {\r\n        if (!parameter.in) return;\r\n\r\n        if (!routeParams[parameter.in]) {\r\n          routeParams[parameter.in] = [];\r\n        }\r\n\r\n        routeParam = {\r\n          ...parameter,\r\n          ...(parameter.schema || {}),\r\n        };\r\n      }\r\n\r\n      if (routeParam.in === \"path\") {\r\n        if (!routeParam.name) return;\r\n\r\n        routeParam.name = lodash.camelCase(routeParam.name);\r\n      }\r\n\r\n      if (routeParam) {\r\n        routeParams[routeParam.in].push(routeParam);\r\n      }\r\n    });\r\n\r\n    // used in case when path parameters is not declared in requestInfo.parameters (\"in\": \"path\")\r\n    for (const pathParam of pathParamsFromRouteName) {\r\n      const alreadyExist = routeParams.path.some(\r\n        (parameter) => parameter.name === pathParam.name,\r\n      );\r\n\r\n      if (!alreadyExist) {\r\n        routeParams.path.push(pathParam);\r\n      }\r\n    }\r\n\r\n    // used in case when path parameters is not declared in requestInfo.parameters (\"in\": \"path\")\r\n    for (const queryParam of queryParamsFromRouteName) {\r\n      const alreadyExist = routeParams.query.some(\r\n        (parameter) => parameter.name === queryParam.name,\r\n      );\r\n\r\n      if (!alreadyExist) {\r\n        routeParams.query.push(queryParam);\r\n      }\r\n    }\r\n\r\n    return routeParams;\r\n  };\r\n\r\n  getContentTypes = (requestInfo, extraContentTypes) =>\r\n    lodash.uniq(\r\n      lodash.compact([\r\n        ...(extraContentTypes || []),\r\n        ...lodash.flatten(\r\n          lodash.map(\r\n            requestInfo,\r\n            (requestInfoData) =>\r\n              requestInfoData && lodash.keys(requestInfoData.content),\r\n          ),\r\n        ),\r\n      ]),\r\n    );\r\n\r\n  getContentKind = (contentTypes) => {\r\n    if (\r\n      contentTypes.some((contentType) =>\r\n        contentType.startsWith(\"application/json\"),\r\n      ) ||\r\n      contentTypes.some((contentType) => contentType.endsWith(\"+json\"))\r\n    ) {\r\n      return CONTENT_KIND.JSON;\r\n    }\r\n\r\n    if (contentTypes.includes(\"application/x-www-form-urlencoded\")) {\r\n      return CONTENT_KIND.URL_ENCODED;\r\n    }\r\n\r\n    if (contentTypes.includes(\"multipart/form-data\")) {\r\n      return CONTENT_KIND.FORM_DATA;\r\n    }\r\n\r\n    if (contentTypes.some((contentType) => contentType.includes(\"image/\"))) {\r\n      return CONTENT_KIND.IMAGE;\r\n    }\r\n\r\n    if (contentTypes.some((contentType) => contentType.startsWith(\"text/\"))) {\r\n      return CONTENT_KIND.TEXT;\r\n    }\r\n\r\n    return CONTENT_KIND.OTHER;\r\n  };\r\n\r\n  isSuccessStatus = (status) =>\r\n    (this.config.defaultResponseAsSuccess && status === \"default\") ||\r\n    (+status >= this.config.successResponseStatusRange[0] &&\r\n      +status <= this.config.successResponseStatusRange[1]) ||\r\n    status === \"2xx\";\r\n\r\n  getSchemaFromRequestType = (requestInfo) => {\r\n    const content = lodash.get(requestInfo, \"content\");\r\n\r\n    if (!content) return null;\r\n\r\n    /* content: { \"multipart/form-data\": { schema: {...} }, \"application/json\": { schema: {...} } } */\r\n\r\n    /* for example: dataType = \"multipart/form-data\" */\r\n    for (const dataType in content) {\r\n      if (content[dataType]?.schema) {\r\n        return {\r\n          ...content[dataType].schema,\r\n          dataType,\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  getTypeFromRequestInfo = ({\r\n    requestInfo,\r\n    parsedSchemas,\r\n    operationId,\r\n    defaultType,\r\n    typeName,\r\n  }) => {\r\n    // TODO: make more flexible pick schema without content type\r\n    const schema = this.getSchemaFromRequestType(requestInfo);\r\n    const refTypeInfo =\r\n      this.schemaParserFabric.schemaUtils.getSchemaRefType(requestInfo);\r\n\r\n    if (schema) {\r\n      const content = this.schemaParserFabric.getInlineParseContent(\r\n        schema,\r\n        typeName,\r\n        [operationId],\r\n      );\r\n      const foundedSchemaByName = parsedSchemas.find(\r\n        (parsedSchema) =>\r\n          this.typeNameFormatter.format(parsedSchema.name) === content,\r\n      );\r\n      const foundSchemaByContent = parsedSchemas.find((parsedSchema) =>\r\n        lodash.isEqual(parsedSchema.content, content),\r\n      );\r\n\r\n      const foundSchema = foundedSchemaByName || foundSchemaByContent;\r\n\r\n      return foundSchema\r\n        ? this.typeNameFormatter.format(foundSchema.name)\r\n        : content;\r\n    }\r\n\r\n    if (refTypeInfo) {\r\n      // const refTypeWithoutOpId = refType.replace(operationId, '');\r\n      // const foundedSchemaByName = _.find(parsedSchemas, ({ name }) => name === refType || name === refTypeWithoutOpId)\r\n\r\n      // TODO:HACK fix problem of swagger2opeanpi\r\n      const typeNameWithoutOpId = refTypeInfo.typeName.replace(operationId, \"\");\r\n      if (parsedSchemas.find((schema) => schema.name === typeNameWithoutOpId)) {\r\n        return this.typeNameFormatter.format(typeNameWithoutOpId);\r\n      }\r\n\r\n      switch (refTypeInfo.componentName) {\r\n        case \"schemas\":\r\n          return this.typeNameFormatter.format(refTypeInfo.typeName);\r\n        case \"responses\":\r\n        case \"requestBodies\":\r\n          return this.schemaParserFabric.getInlineParseContent(\r\n            this.getSchemaFromRequestType(refTypeInfo.rawTypeData),\r\n            refTypeInfo.typeName || null,\r\n            [operationId],\r\n          );\r\n        default:\r\n          return this.schemaParserFabric.getInlineParseContent(\r\n            refTypeInfo.rawTypeData,\r\n            refTypeInfo.typeName || null,\r\n            [operationId],\r\n          );\r\n      }\r\n    }\r\n\r\n    return defaultType || this.config.Ts.Keyword.Any;\r\n  };\r\n\r\n  getRequestInfoTypes = ({\r\n    requestInfos,\r\n    parsedSchemas,\r\n    operationId,\r\n    defaultType,\r\n  }) =>\r\n    lodash.reduce(\r\n      requestInfos,\r\n      (acc, requestInfo, status) => {\r\n        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.\r\n        const contentTypes = this.getContentTypes([requestInfo]);\r\n\r\n        return [\r\n          ...acc,\r\n          {\r\n            ...(requestInfo || {}),\r\n            contentTypes: contentTypes,\r\n            contentKind: this.getContentKind(contentTypes),\r\n            type: this.schemaParserFabric.schemaUtils.safeAddNullToType(\r\n              requestInfo,\r\n              // @ts-expect-error TS(2345) FIXME: Argument of type '{ requestInfo: any; parsedSchema... Remove this comment to see the full error message\r\n              this.getTypeFromRequestInfo({\r\n                requestInfo,\r\n                parsedSchemas,\r\n                operationId,\r\n                defaultType,\r\n              }),\r\n            ),\r\n            description:\r\n              this.schemaParserFabric.schemaFormatters.formatDescription(\r\n                requestInfo.description || \"\",\r\n                true,\r\n              ),\r\n            status: Number.isNaN(+status) ? status : +status,\r\n            isSuccess: this.isSuccessStatus(status),\r\n          },\r\n        ];\r\n      },\r\n      [],\r\n    );\r\n\r\n  getResponseBodyInfo = (routeInfo, parsedSchemas) => {\r\n    const { produces, operationId, responses } = routeInfo;\r\n\r\n    const contentTypes = this.getContentTypes(responses, [\r\n      ...(produces || []),\r\n      routeInfo[\"x-accepts\"],\r\n    ]);\r\n\r\n    const responseInfos = this.getRequestInfoTypes({\r\n      requestInfos: responses,\r\n      parsedSchemas,\r\n      operationId,\r\n      defaultType: this.config.defaultResponseType,\r\n    });\r\n\r\n    const successResponse = responseInfos.find(\r\n      (response) => response.isSuccess,\r\n    );\r\n    const errorResponses = responseInfos.filter(\r\n      (response) =>\r\n        !response.isSuccess && response.type !== this.config.Ts.Keyword.Any,\r\n    );\r\n\r\n    const handleResponseHeaders = (src) => {\r\n      if (!src) {\r\n        return \"headers: {},\";\r\n      }\r\n      const headerTypes = Object.fromEntries(\r\n        Object.entries(src).map(([k, v]) => {\r\n          return [k, this.schemaUtils.getSchemaType(v)];\r\n        }),\r\n      );\r\n      const r = `headers: { ${Object.entries(headerTypes)\r\n        .map(([k, v]) => `\"${k}\": ${v}`)\r\n        .join(\",\")} },`;\r\n      return r;\r\n    };\r\n\r\n    return {\r\n      contentTypes,\r\n      responses: responseInfos,\r\n      success: {\r\n        schema: successResponse,\r\n        type: successResponse?.type || this.config.Ts.Keyword.Any,\r\n      },\r\n      error: {\r\n        schemas: errorResponses,\r\n        type:\r\n          this.config.Ts.UnionType(\r\n            errorResponses.map((response) => response.type),\r\n          ) || this.config.Ts.Keyword.Any,\r\n      },\r\n      full: {\r\n        types:\r\n          this.config.Ts.UnionType(\r\n            responseInfos.map(\r\n              (response) => `{\r\n      data: ${response.type}, status: ${response.status}, statusCode: ${\r\n        response.status\r\n      }, statusText: \"${response.description}\", ${handleResponseHeaders(\r\n        response.headers,\r\n      )} config: {} }`,\r\n            ),\r\n          ) || this.config.Ts.Keyword.Any,\r\n      },\r\n    };\r\n  };\r\n\r\n  convertRouteParamsIntoObject = (params) => {\r\n    return params.reduce(\r\n      (objectSchema, schemaPart) => {\r\n        if (!schemaPart || !schemaPart.name) return objectSchema;\r\n\r\n        return {\r\n          ...objectSchema,\r\n          properties: {\r\n            ...objectSchema.properties,\r\n            [schemaPart.name]: {\r\n              ...schemaPart,\r\n              ...(schemaPart.schema || {}),\r\n            },\r\n          },\r\n        };\r\n      },\r\n      {\r\n        properties: {},\r\n        type: \"object\",\r\n      },\r\n    );\r\n  };\r\n\r\n  getRequestBodyInfo = (routeInfo, routeParams, parsedSchemas, routeName) => {\r\n    const { requestBody, consumes, requestBodyName, operationId } = routeInfo;\r\n    let schema = null;\r\n    let content = null;\r\n\r\n    const contentTypes = this.getContentTypes(\r\n      [requestBody],\r\n      [...(consumes || []), routeInfo[\"x-contentType\"]],\r\n    );\r\n    let contentKind = this.getContentKind(contentTypes);\r\n\r\n    let typeName = null;\r\n\r\n    if (this.config.extractRequestBody) {\r\n      typeName = this.schemaUtils.resolveTypeName(routeName.usage, {\r\n        suffixes: this.config.extractingOptions.requestBodySuffix,\r\n        resolver: this.config.extractingOptions.requestBodyNameResolver,\r\n      });\r\n    }\r\n\r\n    if (routeParams.formData.length) {\r\n      contentKind = CONTENT_KIND.FORM_DATA;\r\n      schema = this.convertRouteParamsIntoObject(routeParams.formData);\r\n      content = this.schemaParserFabric.getInlineParseContent(\r\n        schema,\r\n        typeName,\r\n        [operationId],\r\n      );\r\n    } else if (contentKind === CONTENT_KIND.FORM_DATA) {\r\n      schema = this.getSchemaFromRequestType(requestBody);\r\n      content = this.schemaParserFabric.getInlineParseContent(\r\n        schema,\r\n        typeName,\r\n        [operationId],\r\n      );\r\n    } else if (requestBody) {\r\n      schema = this.getSchemaFromRequestType(requestBody);\r\n      content = this.schemaParserFabric.schemaUtils.safeAddNullToType(\r\n        requestBody,\r\n        // @ts-expect-error TS(2345) FIXME: Argument of type '{ requestInfo: any; parsedSchema... Remove this comment to see the full error message\r\n        this.getTypeFromRequestInfo({\r\n          requestInfo: requestBody,\r\n          parsedSchemas,\r\n          operationId,\r\n          typeName,\r\n        }),\r\n      );\r\n\r\n      // TODO: Refactor that.\r\n      // It needed for cases when swagger schema is not declared request body type as form data\r\n      // but request body data type contains form data types like File\r\n      if (\r\n        this.FORM_DATA_TYPES.some((dataType) =>\r\n          content.includes(`: ${dataType}`),\r\n        )\r\n      ) {\r\n        contentKind = CONTENT_KIND.FORM_DATA;\r\n      }\r\n    }\r\n\r\n    if (schema && !schema.$ref && this.config.extractRequestBody) {\r\n      schema = this.schemaParserFabric.createParsedComponent({\r\n        schema,\r\n        typeName,\r\n        schemaPath: [operationId],\r\n      });\r\n      content = this.schemaParserFabric.getInlineParseContent({\r\n        $ref: schema.$ref,\r\n      });\r\n    }\r\n\r\n    return {\r\n      paramName: requestBodyName || requestBody?.name || DEFAULT_BODY_ARG_NAME,\r\n      contentTypes,\r\n      contentKind,\r\n      schema,\r\n      type: content,\r\n      required:\r\n        requestBody &&\r\n        (typeof requestBody.required === \"undefined\" || !!requestBody.required),\r\n    };\r\n  };\r\n\r\n  createRequestParamsSchema = ({\r\n    queryParams,\r\n    queryObjectSchema,\r\n    pathArgsSchemas,\r\n    extractRequestParams,\r\n    routeName,\r\n  }) => {\r\n    if (!queryParams || !queryParams.length) return null;\r\n\r\n    const pathParams = pathArgsSchemas.reduce((acc, pathArgSchema) => {\r\n      if (pathArgSchema.name) {\r\n        acc[pathArgSchema.name] = {\r\n          ...pathArgSchema,\r\n          in: \"path\",\r\n        };\r\n      }\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    const fixedQueryParams = lodash.reduce(\r\n      lodash.get(queryObjectSchema, \"properties\", {}),\r\n      (acc, property, name) => {\r\n        if (name && typeof property === \"object\") {\r\n          acc[name] = {\r\n            ...property,\r\n            in: \"query\",\r\n          };\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      {},\r\n    );\r\n\r\n    const schema = {\r\n      ...queryObjectSchema,\r\n      properties: {\r\n        ...fixedQueryParams,\r\n        ...pathParams,\r\n      },\r\n    };\r\n\r\n    const fixedSchema = this.config.hooks.onCreateRequestParams(schema);\r\n\r\n    if (fixedSchema) return fixedSchema;\r\n\r\n    if (extractRequestParams) {\r\n      const generatedTypeName = this.schemaUtils.resolveTypeName(\r\n        routeName.usage,\r\n        {\r\n          suffixes: this.config.extractingOptions.requestParamsSuffix,\r\n          resolver: this.config.extractingOptions.requestParamsNameResolver,\r\n        },\r\n      );\r\n\r\n      return this.schemaParserFabric.createParsedComponent({\r\n        typeName: generatedTypeName,\r\n        schema: schema,\r\n      });\r\n    }\r\n\r\n    return schema;\r\n  };\r\n\r\n  extractResponseBodyIfItNeeded = (routeInfo, responseBodyInfo, routeName) => {\r\n    if (\r\n      responseBodyInfo.responses.length &&\r\n      responseBodyInfo.success &&\r\n      responseBodyInfo.success.schema\r\n    ) {\r\n      const typeName = this.schemaUtils.resolveTypeName(routeName.usage, {\r\n        suffixes: this.config.extractingOptions.responseBodySuffix,\r\n        resolver: this.config.extractingOptions.responseBodyNameResolver,\r\n      });\r\n\r\n      const idx = responseBodyInfo.responses.indexOf(\r\n        responseBodyInfo.success.schema,\r\n      );\r\n\r\n      const successResponse = responseBodyInfo.success;\r\n\r\n      if (successResponse.schema && !successResponse.schema.$ref) {\r\n        const contentKind = successResponse.schema.contentKind;\r\n        const schema = this.getSchemaFromRequestType(successResponse.schema);\r\n        successResponse.schema = this.schemaParserFabric.createParsedComponent({\r\n          schema,\r\n          typeName,\r\n          schemaPath: [routeInfo.operationId],\r\n        });\r\n        successResponse.schema.contentKind = contentKind;\r\n        successResponse.type = this.schemaParserFabric.getInlineParseContent({\r\n          $ref: successResponse.schema.$ref,\r\n        });\r\n\r\n        if (idx > -1) {\r\n          lodash.assign(responseBodyInfo.responses[idx], {\r\n            ...successResponse.schema,\r\n            type: successResponse.type,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  extractResponseErrorIfItNeeded = (routeInfo, responseBodyInfo, routeName) => {\r\n    if (\r\n      responseBodyInfo.responses.length &&\r\n      responseBodyInfo.error.schemas &&\r\n      responseBodyInfo.error.schemas.length\r\n    ) {\r\n      const typeName = this.schemaUtils.resolveTypeName(routeName.usage, {\r\n        suffixes: this.config.extractingOptions.responseErrorSuffix,\r\n        resolver: this.config.extractingOptions.responseErrorNameResolver,\r\n      });\r\n\r\n      const errorSchemas = responseBodyInfo.error.schemas\r\n        .map(this.getSchemaFromRequestType)\r\n        .filter(Boolean);\r\n\r\n      if (!errorSchemas.length) return;\r\n\r\n      const schema = this.schemaParserFabric.parseSchema(\r\n        {\r\n          oneOf: errorSchemas,\r\n          title: errorSchemas\r\n            .map((schema) => schema.title)\r\n            .filter(Boolean)\r\n            .join(\" \"),\r\n          description: errorSchemas\r\n            .map((schema) => schema.description)\r\n            .filter(Boolean)\r\n            .join(\"\\n\"),\r\n        },\r\n        null,\r\n        [routeInfo.operationId],\r\n      );\r\n      const component = this.schemaComponentsMap.createComponent(\r\n        this.schemaComponentsMap.createRef([\"components\", \"schemas\", typeName]),\r\n        { ...schema },\r\n      );\r\n      responseBodyInfo.error.schemas = [component];\r\n      responseBodyInfo.error.type = this.typeNameFormatter.format(\r\n        component.typeName,\r\n      );\r\n    }\r\n  };\r\n\r\n  getRouteName = (rawRouteInfo) => {\r\n    const { moduleName } = rawRouteInfo;\r\n    const { routeNameDuplicatesMap, templatesToRender } = this.config;\r\n    const routeNameTemplate = templatesToRender.routeName;\r\n\r\n    const routeNameFromTemplate = this.templatesWorker.renderTemplate(\r\n      routeNameTemplate,\r\n      {\r\n        routeInfo: rawRouteInfo,\r\n      },\r\n    );\r\n\r\n    const routeName =\r\n      this.config.hooks.onFormatRouteName(\r\n        rawRouteInfo,\r\n        routeNameFromTemplate,\r\n      ) || routeNameFromTemplate;\r\n\r\n    const duplicateIdentifier = `${moduleName}|${routeName}`;\r\n\r\n    if (routeNameDuplicatesMap.has(duplicateIdentifier)) {\r\n      routeNameDuplicatesMap.set(\r\n        duplicateIdentifier,\r\n        routeNameDuplicatesMap.get(duplicateIdentifier) + 1,\r\n      );\r\n\r\n      consola.warn(\r\n        `Module \"${moduleName}\" already has method \"${routeName}()\".`,\r\n        `This method has been renamed to \"${\r\n          routeName + routeNameDuplicatesMap.get(duplicateIdentifier)\r\n        }()\" to solve conflict names.`,\r\n      );\r\n    } else {\r\n      routeNameDuplicatesMap.set(duplicateIdentifier, 1);\r\n    }\r\n\r\n    const duplicates = routeNameDuplicatesMap.get(duplicateIdentifier);\r\n\r\n    const routeNameInfo = {\r\n      usage: routeName + (duplicates > 1 ? duplicates : \"\"),\r\n      original: routeName,\r\n      duplicate: duplicates > 1,\r\n    };\r\n\r\n    return (\r\n      this.config.hooks.onCreateRouteName(routeNameInfo, rawRouteInfo) ||\r\n      routeNameInfo\r\n    );\r\n  };\r\n\r\n  parseRouteInfo = (\r\n    rawRouteName,\r\n    routeInfo,\r\n    method,\r\n    usageSchema,\r\n    parsedSchemas,\r\n  ) => {\r\n    const { security: globalSecurity } = usageSchema;\r\n    const { moduleNameIndex, moduleNameFirstTag, extractRequestParams } =\r\n      this.config;\r\n    const {\r\n      operationId,\r\n      requestBody,\r\n      security,\r\n      parameters,\r\n      summary,\r\n      description,\r\n      tags,\r\n      responses,\r\n      requestBodyName,\r\n      produces,\r\n      consumes,\r\n      ...otherInfo\r\n    } = routeInfo;\r\n    const {\r\n      route,\r\n      pathParams: pathParamsFromRouteName,\r\n      queryParams: queryParamsFromRouteName,\r\n    } = this.parseRouteName(rawRouteName);\r\n\r\n    const routeId = generateId();\r\n    const firstTag = tags && tags.length > 0 ? tags[0] : null;\r\n    const moduleName =\r\n      moduleNameFirstTag && firstTag\r\n        ? lodash.camelCase(firstTag)\r\n        : // @ts-expect-error TS(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\r\n          lodash.camelCase(lodash.compact(route.split(\"/\"))[moduleNameIndex]);\r\n    let hasSecurity = !!globalSecurity?.length;\r\n    if (security) {\r\n      hasSecurity = security.length > 0;\r\n    }\r\n\r\n    const routeParams = this.getRouteParams(\r\n      routeInfo,\r\n      pathParamsFromRouteName,\r\n      queryParamsFromRouteName,\r\n    );\r\n\r\n    const pathArgs = routeParams.path.map((pathArgSchema) => ({\r\n      name: pathArgSchema.name,\r\n      optional: !pathArgSchema.required,\r\n      // mark it as any for now, because \"getInlineParseContent\" breaks type names of extracted enums\r\n      type: this.config.Ts.Keyword.Any,\r\n      description: pathArgSchema.description,\r\n    }));\r\n    const pathArgsNames = pathArgs.map((arg) => arg.name);\r\n\r\n    const responseBodyInfo = this.getResponseBodyInfo(routeInfo, parsedSchemas);\r\n\r\n    const rawRouteInfo = {\r\n      ...otherInfo,\r\n      pathArgs,\r\n      operationId,\r\n      method,\r\n      route: rawRouteName,\r\n      moduleName,\r\n      responsesTypes: responseBodyInfo.responses,\r\n      description,\r\n      tags,\r\n      summary,\r\n      responses,\r\n      produces,\r\n      requestBody,\r\n      consumes,\r\n      security,\r\n    };\r\n\r\n    const queryObjectSchema = this.convertRouteParamsIntoObject(\r\n      routeParams.query,\r\n    );\r\n    const pathObjectSchema = this.convertRouteParamsIntoObject(\r\n      routeParams.path,\r\n    );\r\n    const headersObjectSchema = this.convertRouteParamsIntoObject(\r\n      routeParams.header,\r\n    );\r\n\r\n    const routeName = this.getRouteName(rawRouteInfo);\r\n\r\n    const requestBodyInfo = this.getRequestBodyInfo(\r\n      routeInfo,\r\n      routeParams,\r\n      parsedSchemas,\r\n      routeName,\r\n    );\r\n\r\n    const requestParamsSchema = this.createRequestParamsSchema({\r\n      queryParams: routeParams.query,\r\n      pathArgsSchemas: routeParams.path,\r\n      queryObjectSchema,\r\n      extractRequestParams,\r\n      routeName,\r\n    });\r\n\r\n    if (this.config.extractResponseBody) {\r\n      this.extractResponseBodyIfItNeeded(\r\n        routeInfo,\r\n        responseBodyInfo,\r\n        routeName,\r\n      );\r\n    }\r\n    if (this.config.extractResponseError) {\r\n      this.extractResponseErrorIfItNeeded(\r\n        routeInfo,\r\n        responseBodyInfo,\r\n        routeName,\r\n      );\r\n    }\r\n\r\n    const typeName = this.schemaUtils.resolveTypeName(routeName.usage, {\r\n      suffixes: this.config.extractingOptions.requestParamsSuffix,\r\n      resolver: this.config.extractingOptions.requestParamsNameResolver,\r\n      shouldReserve: false,\r\n    });\r\n\r\n    const queryType = routeParams.query.length\r\n      ? this.schemaParserFabric.getInlineParseContent(queryObjectSchema, null, [\r\n          typeName,\r\n        ])\r\n      : null;\r\n    const pathType = routeParams.path.length\r\n      ? this.schemaParserFabric.getInlineParseContent(pathObjectSchema, null, [\r\n          typeName,\r\n        ])\r\n      : null;\r\n    const headersType = routeParams.header.length\r\n      ? this.schemaParserFabric.getInlineParseContent(\r\n          headersObjectSchema,\r\n          null,\r\n          [typeName],\r\n        )\r\n      : null;\r\n\r\n    const nameResolver = new SpecificArgNameResolver(\r\n      this.config,\r\n      pathArgsNames,\r\n    );\r\n\r\n    const specificArgs = {\r\n      query: queryType\r\n        ? {\r\n            name: nameResolver.resolve(RESERVED_QUERY_ARG_NAMES),\r\n            optional: this.schemaParserFabric.parseSchema(\r\n              queryObjectSchema,\r\n              null,\r\n              [routeName.usage],\r\n            ).allFieldsAreOptional,\r\n            type: queryType,\r\n          }\r\n        : void 0,\r\n      body: requestBodyInfo.type\r\n        ? {\r\n            name: nameResolver.resolve([\r\n              requestBodyInfo.paramName,\r\n              ...RESERVED_BODY_ARG_NAMES,\r\n            ]),\r\n            optional: !requestBodyInfo.required,\r\n            type: requestBodyInfo.type,\r\n          }\r\n        : void 0,\r\n      pathParams: pathType\r\n        ? {\r\n            name: nameResolver.resolve(RESERVED_PATH_ARG_NAMES),\r\n            optional: this.schemaParserFabric.parseSchema(\r\n              pathObjectSchema,\r\n              null,\r\n              [routeName.usage],\r\n            ).allFieldsAreOptional,\r\n            type: pathType,\r\n          }\r\n        : void 0,\r\n      headers: headersType\r\n        ? {\r\n            name: nameResolver.resolve(RESERVED_HEADER_ARG_NAMES),\r\n            optional: this.schemaParserFabric.parseSchema(\r\n              headersObjectSchema,\r\n              null,\r\n              [routeName.usage],\r\n            ).allFieldsAreOptional,\r\n            type: headersType,\r\n          }\r\n        : void 0,\r\n    };\r\n\r\n    pathArgs.forEach((pathArg, i) => {\r\n      pathArg.type = this.schemaParserFabric.getInlineParseContent(\r\n        routeParams.path[i].schema,\r\n        null,\r\n        [typeName],\r\n      );\r\n    });\r\n\r\n    return {\r\n      id: routeId,\r\n      namespace: moduleName.replace(/^(\\d)/, \"v$1\"),\r\n      routeName,\r\n      routeParams,\r\n      requestBodyInfo,\r\n      responseBodyInfo,\r\n      specificArgs,\r\n      queryObjectSchema,\r\n      pathObjectSchema,\r\n      headersObjectSchema,\r\n      responseBodySchema: responseBodyInfo.success.schema,\r\n      requestBodySchema: requestBodyInfo.schema,\r\n      specificArgNameResolver: nameResolver,\r\n      request: {\r\n        contentTypes: requestBodyInfo.contentTypes,\r\n        parameters: pathArgs,\r\n        path: route,\r\n        formData: requestBodyInfo.contentKind === CONTENT_KIND.FORM_DATA,\r\n        isQueryBody: requestBodyInfo.contentKind === CONTENT_KIND.URL_ENCODED,\r\n        security: hasSecurity,\r\n        method: method,\r\n        requestParams: requestParamsSchema,\r\n\r\n        payload: specificArgs.body,\r\n        query: specificArgs.query,\r\n        pathParams: specificArgs.pathParams,\r\n        headers: specificArgs.headers,\r\n      },\r\n      response: {\r\n        contentTypes: responseBodyInfo.contentTypes,\r\n        type: responseBodyInfo.success.type,\r\n        errorType: responseBodyInfo.error.type,\r\n        fullTypes: responseBodyInfo.full.types,\r\n      },\r\n      raw: rawRouteInfo,\r\n    };\r\n  };\r\n\r\n  attachSchema = ({ usageSchema, parsedSchemas }) => {\r\n    this.config.routeNameDuplicatesMap.clear();\r\n\r\n    const pathsEntries = lodash.entries(usageSchema.paths);\r\n\r\n    for (const [rawRouteName, routeInfoByMethodsMap] of pathsEntries) {\r\n      const routeInfosMap = this.createRequestsMap(routeInfoByMethodsMap);\r\n\r\n      for (const [method, routeInfo] of Object.entries(routeInfosMap)) {\r\n        const parsedRouteInfo = this.parseRouteInfo(\r\n          rawRouteName,\r\n          routeInfo,\r\n          method,\r\n          usageSchema,\r\n          parsedSchemas,\r\n        );\r\n        const processedRouteInfo =\r\n          this.config.hooks.onCreateRoute(parsedRouteInfo);\r\n        if (processedRouteInfo !== false) {\r\n          const route = processedRouteInfo || parsedRouteInfo;\r\n\r\n          if (!this.hasSecurityRoutes && route.security) {\r\n            this.hasSecurityRoutes = route.security;\r\n          }\r\n          if (!this.hasQueryRoutes && route.hasQuery) {\r\n            this.hasQueryRoutes = route.hasQuery;\r\n          }\r\n          if (!this.hasFormDataRoutes && route.hasFormDataParams) {\r\n            this.hasFormDataRoutes = route.hasFormDataParams;\r\n          }\r\n\r\n          this.routes.push(route);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  getGroupedRoutes = () => {\r\n    const groupedRoutes = this.routes.reduce(\r\n      (modules, route) => {\r\n        if (route.namespace) {\r\n          if (!modules[route.namespace]) {\r\n            modules[route.namespace] = [];\r\n          }\r\n\r\n          modules[route.namespace].push(route);\r\n        } else {\r\n          modules.$outOfModule.push(route);\r\n        }\r\n\r\n        return modules;\r\n      },\r\n      { $outOfModule: [] as ParsedRoute[] },\r\n    );\r\n\r\n    const routeGroups = lodash.reduce(\r\n      groupedRoutes,\r\n      (acc, routesGroup, moduleName) => {\r\n        if (moduleName === \"$outOfModule\") {\r\n          acc.outOfModule = routesGroup;\r\n        } else {\r\n          if (!acc.combined) {\r\n            acc.combined = [];\r\n          }\r\n          acc.combined.push({\r\n            moduleName,\r\n            routes: routesGroup.map((route) => {\r\n              const { original: originalName, usage: usageName } =\r\n                route.routeName;\r\n\r\n              // TODO: https://github.com/acacode/swagger-typescript-api/issues/152\r\n              // TODO: refactor\r\n              if (\r\n                routesGroup.length > 1 &&\r\n                usageName !== originalName &&\r\n                !routesGroup.some(\r\n                  ({ routeName, id }) =>\r\n                    id !== route.id && originalName === routeName.original,\r\n                )\r\n              ) {\r\n                return {\r\n                  ...route,\r\n                  routeName: {\r\n                    ...route.routeName,\r\n                    usage: originalName,\r\n                  },\r\n                };\r\n              }\r\n\r\n              return route;\r\n            }),\r\n          });\r\n        }\r\n        return acc;\r\n      },\r\n      {} as GenerateApiConfiguration[\"routes\"],\r\n    );\r\n\r\n    if (this.config.sortRoutes) {\r\n      if (routeGroups.outOfModule) {\r\n        routeGroups.outOfModule = this.sortRoutes(routeGroups.outOfModule);\r\n      }\r\n      if (routeGroups.combined) {\r\n        lodash.each(routeGroups.combined, (routeGroup) => {\r\n          routeGroup.routes = this.sortRoutes(routeGroup.routes);\r\n        });\r\n      }\r\n    }\r\n\r\n    return routeGroups;\r\n  };\r\n\r\n  sortRoutes = (routes: ParsedRoute[]) => {\r\n    return lodash\r\n      .slice(routes)\r\n      .sort((routeA, routeB) =>\r\n        routeA.routeName.usage.localeCompare(routeB.routeName.usage),\r\n      );\r\n  };\r\n}\r\n","import * as nanoid from \"nanoid\";\r\n\r\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\nexport const generateId = nanoid.customAlphabet(ALPHABET, 12);\r\n","import { consola } from \"consola\";\r\nimport type { CodeGenConfig } from \"../../configuration.js\";\r\nimport { NameResolver } from \"../../util/name-resolver.js\";\r\n\r\nexport class SpecificArgNameResolver extends NameResolver {\r\n  counter = 1;\r\n  constructor(config: CodeGenConfig, reservedNames: string[]) {\r\n    super(config, reservedNames, (variants) => {\r\n      const generatedVariant =\r\n        (variants[0] && `${variants[0]}${this.counter++}`) ||\r\n        `${this.config.specificArgNameResolverName}${this.counter++}`;\r\n      consola.debug(\r\n        \"generated fallback type name for specific arg - \",\r\n        generatedVariant,\r\n      );\r\n      return generatedVariant;\r\n    });\r\n  }\r\n}\r\n","import lodash from \"lodash\";\r\nimport type { OpenAPI } from \"openapi-types\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\nimport type { SwaggerSchemaResolver } from \"./swagger-schema-resolver.js\";\r\n\r\n// TODO: WIP\r\n// this class will be needed to walk by schema everywhere\r\nexport class SchemaWalker {\r\n  config: CodeGenConfig;\r\n  swaggerSchemaResolver: SwaggerSchemaResolver;\r\n  schemas = new Map<string, OpenAPI.Document>();\r\n  caches = new Map<string, OpenAPI.Document>();\r\n\r\n  constructor(\r\n    config: CodeGenConfig,\r\n    swaggerSchemaResolver: SwaggerSchemaResolver,\r\n  ) {\r\n    this.config = config;\r\n    this.swaggerSchemaResolver = swaggerSchemaResolver;\r\n  }\r\n\r\n  addSchema = (name: string, schema: OpenAPI.Document) => {\r\n    this.schemas.set(name, structuredClone(schema));\r\n  };\r\n\r\n  _isLocalRef = (ref: string) => {\r\n    return ref.startsWith(\"#\");\r\n  };\r\n\r\n  _isRemoteRef = (ref: string) => {\r\n    return ref.startsWith(\"http://\") || ref.startsWith(\"https://\");\r\n  };\r\n\r\n  _getRefDataFromSchema = (schema: Record<string, unknown>, ref: string) => {\r\n    const path = ref.replace(\"#\", \"\").split(\"/\");\r\n    const refData = lodash.get(schema, path);\r\n    if (refData) {\r\n      this.caches.set(ref, refData);\r\n    }\r\n    return refData;\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\n\r\nexport class Request {\r\n  config: CodeGenConfig;\r\n\r\n  constructor(config: CodeGenConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  async download({\r\n    url,\r\n    authToken,\r\n    ...options\r\n  }: {\r\n    url: string;\r\n    authToken?: string;\r\n    options?: Partial<RequestInit>;\r\n  }) {\r\n    const requestOptions: Partial<RequestInit> = {};\r\n\r\n    if (authToken) {\r\n      requestOptions.headers = {\r\n        Authorization: authToken,\r\n      };\r\n    }\r\n\r\n    lodash.merge(requestOptions, options, this.config.requestOptions);\r\n\r\n    try {\r\n      const response = await fetch(url, requestOptions);\r\n      return await response.text();\r\n    } catch (error) {\r\n      const message = `error while fetching data from URL \"${url}\"`;\r\n      consola.error(message, error);\r\n      return message;\r\n    }\r\n  }\r\n}\r\n","import { consola } from \"consola\";\r\nimport * as yaml from \"js-yaml\";\r\nimport lodash from \"lodash\";\r\nimport type { OpenAPI, OpenAPIV2 } from \"openapi-types\";\r\nimport * as swagger2openapi from \"swagger2openapi\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\nimport type { FileSystem } from \"./util/file-system.js\";\r\nimport { Request } from \"./util/request.js\";\r\n\r\nexport class SwaggerSchemaResolver {\r\n  config: CodeGenConfig;\r\n  fileSystem: FileSystem;\r\n  request: Request;\r\n\r\n  constructor(config: CodeGenConfig, fileSystem: FileSystem) {\r\n    this.config = config;\r\n    this.fileSystem = fileSystem;\r\n    this.request = new Request(config);\r\n  }\r\n\r\n  async create() {\r\n    const { spec, patch, input, url, authorizationToken } = this.config;\r\n\r\n    if (spec) {\r\n      return await this.convertSwaggerObject(spec, { patch });\r\n    }\r\n\r\n    const swaggerSchemaFile = await this.fetchSwaggerSchemaFile(\r\n      input,\r\n      url,\r\n      authorizationToken,\r\n    );\r\n    const swaggerSchemaObject =\r\n      this.processSwaggerSchemaFile(swaggerSchemaFile);\r\n    return await this.convertSwaggerObject(swaggerSchemaObject, { patch });\r\n  }\r\n\r\n  convertSwaggerObject(\r\n    swaggerSchema: OpenAPI.Document,\r\n    converterOptions: { patch?: boolean },\r\n  ): Promise<{\r\n    usageSchema: OpenAPI.Document;\r\n    originalSchema: OpenAPI.Document;\r\n  }> {\r\n    return new Promise((resolve) => {\r\n      const result = structuredClone(swaggerSchema);\r\n      result.info = lodash.merge(\r\n        {\r\n          title: \"No title\",\r\n          version: \"\",\r\n        },\r\n        result.info,\r\n      );\r\n\r\n      if (!Object.hasOwn(result, \"openapi\")) {\r\n        result.paths = lodash.merge({}, result.paths);\r\n\r\n        swagger2openapi.convertObj(\r\n          result as OpenAPIV2.Document,\r\n          {\r\n            ...converterOptions,\r\n            warnOnly: true,\r\n            refSiblings: \"preserve\",\r\n            rbname: \"requestBodyName\",\r\n          },\r\n          (err, options) => {\r\n            const parsedSwaggerSchema = lodash.get(\r\n              err,\r\n              \"options.openapi\",\r\n              lodash.get(options, \"openapi\"),\r\n            );\r\n            if (!parsedSwaggerSchema && err) {\r\n              throw err;\r\n            }\r\n            this.config.update({ convertedFromSwagger2: true });\r\n            resolve({\r\n              usageSchema: parsedSwaggerSchema,\r\n              originalSchema: result,\r\n            });\r\n          },\r\n        );\r\n      } else {\r\n        resolve({\r\n          usageSchema: result,\r\n          originalSchema: structuredClone(result),\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getSwaggerSchemaByPath = (pathToSwagger: string) => {\r\n    consola.info(`try to get swagger by path \"${pathToSwagger}\"`);\r\n    return this.fileSystem.getFileContent(pathToSwagger);\r\n  };\r\n\r\n  async fetchSwaggerSchemaFile(\r\n    pathToSwagger: string,\r\n    urlToSwagger: string,\r\n    authToken?: string,\r\n  ) {\r\n    if (this.fileSystem.pathIsExist(pathToSwagger)) {\r\n      return this.getSwaggerSchemaByPath(pathToSwagger);\r\n    }\r\n    consola.info(`try to get swagger by URL \"${urlToSwagger}\"`);\r\n    return await this.request.download({\r\n      url: urlToSwagger,\r\n      authToken: authToken,\r\n    });\r\n  }\r\n\r\n  processSwaggerSchemaFile(file: string) {\r\n    if (typeof file !== \"string\") return file;\r\n\r\n    try {\r\n      return JSON.parse(file);\r\n    } catch (e) {\r\n      return yaml.load(file);\r\n    }\r\n  }\r\n\r\n  fixSwaggerSchema({ usageSchema, originalSchema }) {\r\n    const usagePaths = lodash.get(usageSchema, \"paths\");\r\n    const originalPaths = lodash.get(originalSchema, \"paths\");\r\n\r\n    // walk by routes\r\n    lodash.each(usagePaths, (usagePathObject, route) => {\r\n      const originalPathObject = lodash.get(originalPaths, route);\r\n\r\n      // walk by methods\r\n      lodash.each(usagePathObject, (usageRouteInfo, methodName) => {\r\n        const originalRouteInfo = lodash.get(originalPathObject, methodName);\r\n        const usageRouteParams = lodash.get(usageRouteInfo, \"parameters\", []);\r\n        const originalRouteParams = lodash.get(\r\n          originalRouteInfo,\r\n          \"parameters\",\r\n          [],\r\n        );\r\n\r\n        if (typeof usageRouteInfo === \"object\") {\r\n          usageRouteInfo.consumes = lodash.uniq(\r\n            lodash.compact([\r\n              ...(usageRouteInfo.consumes || []),\r\n              ...(originalRouteInfo.consumes || []),\r\n            ]),\r\n          );\r\n          usageRouteInfo.produces = lodash.uniq(\r\n            lodash.compact([\r\n              ...(usageRouteInfo.produces || []),\r\n              ...(originalRouteInfo.produces || []),\r\n            ]),\r\n          );\r\n        }\r\n\r\n        lodash.each(originalRouteParams, (originalRouteParam) => {\r\n          const existUsageParam = usageRouteParams.find(\r\n            (param) =>\r\n              originalRouteParam.in === param.in &&\r\n              originalRouteParam.name === param.name,\r\n          );\r\n          if (!existUsageParam) {\r\n            usageRouteParams.push(originalRouteParam);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n","import * as path from \"node:path\";\r\nimport * as url from \"node:url\";\r\nimport { consola } from \"consola\";\r\nimport * as Eta from \"eta\";\r\nimport lodash from \"lodash\";\r\nimport type { CodeGenProcess } from \"./code-gen-process.js\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\nimport type { FileSystem } from \"./util/file-system.js\";\r\n\r\nexport class TemplatesWorker {\r\n  config: CodeGenConfig;\r\n  fileSystem: FileSystem;\r\n  getRenderTemplateData: CodeGenProcess[\"getRenderTemplateData\"];\r\n\r\n  constructor(\r\n    config: CodeGenConfig,\r\n    fileSystem: FileSystem,\r\n    getRenderTemplateData: CodeGenProcess[\"getRenderTemplateData\"],\r\n  ) {\r\n    this.config = config;\r\n    this.fileSystem = fileSystem;\r\n    this.getRenderTemplateData = getRenderTemplateData;\r\n    if (this.config.debug) consola.level = Number.MAX_SAFE_INTEGER;\r\n    if (this.config.silent) consola.level = 0;\r\n  }\r\n\r\n  getTemplatePaths = (\r\n    config: CodeGenConfig,\r\n  ): CodeGenConfig[\"templatePaths\"] => {\r\n    const __dirname = path.dirname(url.fileURLToPath(import.meta.url));\r\n    const baseTemplatesPath = path.resolve(__dirname, \"../templates/base\");\r\n    const defaultTemplatesPath = path.resolve(\r\n      __dirname,\r\n      \"../templates/default\",\r\n    );\r\n    const modularTemplatesPath = path.resolve(\r\n      __dirname,\r\n      \"../templates/modular\",\r\n    );\r\n    const originalTemplatesPath = config.modular\r\n      ? modularTemplatesPath\r\n      : defaultTemplatesPath;\r\n    const customTemplatesPath =\r\n      config.templates && path.resolve(process.cwd(), config.templates);\r\n\r\n    return {\r\n      /** `templates/base` */\r\n      base: baseTemplatesPath,\r\n      /** `templates/default` */\r\n      default: defaultTemplatesPath,\r\n      /** `templates/modular` */\r\n      modular: modularTemplatesPath,\r\n      /** usage path if `--templates` option is not set */\r\n      original: originalTemplatesPath,\r\n      /** custom path to templates (`--templates`) */\r\n      custom: customTemplatesPath,\r\n    };\r\n  };\r\n\r\n  cropExtension = (path: string) =>\r\n    this.config.templateExtensions.reduce(\r\n      (path, ext) => (path.endsWith(ext) ? path.replace(ext, \"\") : path),\r\n      path,\r\n    );\r\n\r\n  getTemplateFullPath = (path_: string, fileName: string) => {\r\n    const raw = path.resolve(path_, \"./\", this.cropExtension(fileName));\r\n    const pathVariants = this.config.templateExtensions.map(\r\n      (extension) => `${raw}${extension}`,\r\n    );\r\n\r\n    return pathVariants.find(\r\n      (variant) => !!this.fileSystem.pathIsExist(variant),\r\n    );\r\n  };\r\n\r\n  requireFnFromTemplate = async (packageOrPath: string) => {\r\n    const isPath =\r\n      packageOrPath.startsWith(\"./\") || packageOrPath.startsWith(\"../\");\r\n\r\n    if (isPath) {\r\n      return await import(\r\n        path.resolve(\r\n          this.config.templatePaths.custom ||\r\n            this.config.templatePaths.original,\r\n          packageOrPath,\r\n        )\r\n      );\r\n    }\r\n\r\n    return await import(packageOrPath);\r\n  };\r\n\r\n  getTemplate = (name: string, fileName: string, path?: string) => {\r\n    const { templatePaths } = this.config;\r\n\r\n    if (path) {\r\n      return this.fileSystem.getFileContent(path);\r\n    }\r\n\r\n    if (!fileName) return \"\";\r\n\r\n    const customFullPath =\r\n      templatePaths.custom &&\r\n      this.getTemplateFullPath(templatePaths.custom, fileName);\r\n    let fileContent =\r\n      customFullPath && this.fileSystem.getFileContent(customFullPath);\r\n\r\n    if (fileContent) {\r\n      consola.info(\r\n        `\"${name.toLowerCase()}\" template found in \"${templatePaths.custom}\"`,\r\n      );\r\n      return fileContent;\r\n    }\r\n\r\n    const baseFullPath = this.getTemplateFullPath(templatePaths.base, fileName);\r\n\r\n    if (baseFullPath) {\r\n      fileContent = this.fileSystem.getFileContent(baseFullPath);\r\n    } else {\r\n      if (templatePaths.custom) {\r\n        consola.warn(\r\n          \"Code generator will use the default template:\",\r\n          `\"${name.toLowerCase()}\"`,\r\n          \"template not found in\",\r\n          `\"${templatePaths.custom}\"`,\r\n        );\r\n      } else {\r\n        consola.info(\r\n          `Code generator will use the default template for \"${name.toLowerCase()}\"`,\r\n        );\r\n      }\r\n    }\r\n\r\n    const originalFullPath = this.getTemplateFullPath(\r\n      templatePaths.original,\r\n      fileName,\r\n    );\r\n\r\n    if (originalFullPath) {\r\n      fileContent = this.fileSystem.getFileContent(originalFullPath);\r\n    }\r\n\r\n    return fileContent;\r\n  };\r\n\r\n  getTemplates = ({ templatePaths }: CodeGenConfig) => {\r\n    if (templatePaths.custom) {\r\n      consola.info(\r\n        `try to read templates from directory \"${templatePaths.custom}\"`,\r\n      );\r\n    }\r\n\r\n    return lodash.reduce(\r\n      this.config.templateInfos,\r\n      (acc, { name, fileName }) => ({\r\n        ...acc,\r\n        [name]: this.getTemplate(name, fileName),\r\n      }),\r\n      {},\r\n    );\r\n  };\r\n\r\n  findTemplateWithExt = (path: string) => {\r\n    const raw = this.cropExtension(path);\r\n    const pathVariants = this.config.templateExtensions.map(\r\n      (extension) => `${raw}${extension}`,\r\n    );\r\n    return pathVariants.find((variant) => this.fileSystem.pathIsExist(variant));\r\n  };\r\n\r\n  getTemplateContent = (path_: string) => {\r\n    const foundTemplatePathKey = lodash\r\n      .keys(this.config.templatePaths)\r\n      .find((key) => path_.startsWith(`@${key}`));\r\n\r\n    if (foundTemplatePathKey) {\r\n      const rawPath = path.resolve(\r\n        path_.replace(\r\n          `@${foundTemplatePathKey}`,\r\n          lodash.get(this.config.templatePaths, foundTemplatePathKey),\r\n        ),\r\n      );\r\n      const fixedPath = this.findTemplateWithExt(rawPath);\r\n\r\n      if (fixedPath) {\r\n        return this.fileSystem.getFileContent(fixedPath);\r\n      }\r\n    }\r\n\r\n    const customPath =\r\n      this.config.templatePaths.custom &&\r\n      this.findTemplateWithExt(\r\n        path.resolve(this.config.templatePaths.custom, path_),\r\n      );\r\n\r\n    if (customPath) {\r\n      return this.fileSystem.getFileContent(customPath);\r\n    }\r\n\r\n    const originalPath = this.findTemplateWithExt(\r\n      path.resolve(this.config.templatePaths.original, path_),\r\n    );\r\n\r\n    if (originalPath) {\r\n      return this.fileSystem.getFileContent(originalPath);\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  renderTemplate = (\r\n    template: string,\r\n    configuration: object,\r\n    options: object = {},\r\n  ) => {\r\n    if (!template) return \"\";\r\n\r\n    return Eta.render(\r\n      template,\r\n      {\r\n        ...this.getRenderTemplateData(),\r\n        ...configuration,\r\n      },\r\n      {\r\n        async: false,\r\n        ...options,\r\n        includeFile: (\r\n          path: string,\r\n          configuration: object,\r\n          options: object = {},\r\n        ) => {\r\n          return this.renderTemplate(\r\n            this.getTemplateContent(path),\r\n            configuration,\r\n            options,\r\n          );\r\n        },\r\n      },\r\n    );\r\n  };\r\n}\r\n","import * as typescript from \"typescript\";\r\nimport { Translator, type TranslatorIO } from \"./translator.js\";\r\n\r\nexport class JavascriptTranslator extends Translator {\r\n  compileTSCode = (input: TranslatorIO): Record<string, string> => {\r\n    const fileNameFull = `${input.fileName}${input.fileExtension}`;\r\n    const output = {};\r\n    const host = typescript.createCompilerHost(\r\n      this.config.compilerTsConfig,\r\n      true,\r\n    );\r\n    const fileNames = [fileNameFull];\r\n    const originalSourceFileGet = host.getSourceFile.bind(host);\r\n    host.getSourceFile = (\r\n      sourceFileName,\r\n      languageVersion,\r\n      onError,\r\n      shouldCreateNewSourceFile,\r\n    ) => {\r\n      if (sourceFileName !== fileNameFull)\r\n        return originalSourceFileGet(\r\n          sourceFileName,\r\n          languageVersion,\r\n          onError,\r\n          shouldCreateNewSourceFile,\r\n        );\r\n\r\n      return typescript.createSourceFile(\r\n        sourceFileName,\r\n        input.fileContent,\r\n        languageVersion,\r\n        true,\r\n        typescript.ScriptKind.TS,\r\n      );\r\n    };\r\n\r\n    host.writeFile = (fileName, contents) => {\r\n      output[fileName] = contents;\r\n    };\r\n\r\n    typescript\r\n      .createProgram(fileNames, this.config.compilerTsConfig, host)\r\n      .emit();\r\n\r\n    return output;\r\n  };\r\n\r\n  translate = async (input) => {\r\n    const compiled = this.compileTSCode(input);\r\n\r\n    const jsFileName = `${input.fileName}${typescript.Extension.Js}`;\r\n    const dtsFileName = `${input.fileName}${typescript.Extension.Dts}`;\r\n    const sourceContent = compiled[jsFileName];\r\n    const tsImportRows = input.fileContent\r\n      .split(\"\\n\")\r\n      .filter((line) => line.startsWith(\"import \"));\r\n    const declarationContent = compiled[dtsFileName]\r\n      .split(\"\\n\")\r\n      .map((line) => {\r\n        if (line.startsWith(\"import \")) {\r\n          return tsImportRows.shift();\r\n        }\r\n        return line;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    return [\r\n      {\r\n        fileName: input.fileName,\r\n        fileExtension: typescript.Extension.Js,\r\n        fileContent: await this.codeFormatter.formatCode(sourceContent),\r\n      },\r\n      {\r\n        fileName: input.fileName,\r\n        fileExtension: typescript.Extension.Dts,\r\n        fileContent: await this.codeFormatter.formatCode(declarationContent),\r\n      },\r\n    ];\r\n  };\r\n}\r\n","import type { CodeFormatter } from \"../code-formatter.js\";\r\nimport type { CodeGenConfig } from \"../configuration.js\";\r\n\r\nexport interface TranslatorIO {\r\n  fileName: string;\r\n  fileExtension: string;\r\n  fileContent: string;\r\n}\r\n\r\nexport class Translator {\r\n  config: CodeGenConfig;\r\n  codeFormatter: CodeFormatter;\r\n\r\n  constructor(config: CodeGenConfig, codeFormatter: CodeFormatter) {\r\n    this.config = config;\r\n    this.codeFormatter = codeFormatter;\r\n  }\r\n\r\n  translate(_input: TranslatorIO): Promise<TranslatorIO[]> {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n}\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport type { CodeGenConfig } from \"./configuration.js\";\r\n\r\ntype FormattingSchemaType = \"enum-key\" | \"type-name\";\r\n\r\nexport class TypeNameFormatter {\r\n  formattedModelNamesMap = new Map<string, string>();\r\n  config: CodeGenConfig;\r\n\r\n  constructor(config: CodeGenConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  format = (name: string, options: { type?: FormattingSchemaType } = {}) => {\r\n    const schemaType = options.type ?? \"type-name\";\r\n\r\n    const typePrefix =\r\n      schemaType === \"enum-key\"\r\n        ? this.config.enumKeyPrefix\r\n        : this.config.typePrefix;\r\n    const typeSuffix =\r\n      schemaType === \"enum-key\"\r\n        ? this.config.enumKeySuffix\r\n        : this.config.typeSuffix;\r\n\r\n    const hashKey = `${typePrefix}_${name}_${typeSuffix}`;\r\n\r\n    if (typeof name !== \"string\") {\r\n      consola.warn(\"wrong name of the model name\", name);\r\n      return name;\r\n    }\r\n\r\n    // constant names like LEFT_ARROW, RIGHT_FORWARD, ETC_KEY, _KEY_NUM_\r\n    if (/^([A-Z_]{1,})$/g.test(name)) {\r\n      return lodash.compact([typePrefix, name, typeSuffix]).join(\"_\");\r\n    }\r\n\r\n    if (this.formattedModelNamesMap.has(hashKey)) {\r\n      return this.formattedModelNamesMap.get(hashKey);\r\n    }\r\n\r\n    const fixedModelName = this.fixModelName(name, { type: schemaType });\r\n\r\n    const formattedName = lodash\r\n      .startCase(`${typePrefix}_${fixedModelName}_${typeSuffix}`)\r\n      .replace(/\\s/g, \"\");\r\n    const formattedResultName =\r\n      this.config.hooks.onFormatTypeName(formattedName, name, schemaType) ||\r\n      formattedName;\r\n\r\n    this.formattedModelNamesMap.set(hashKey, formattedResultName);\r\n\r\n    return formattedResultName;\r\n  };\r\n\r\n  isValidName = (name: string) => /^([A-Za-z$_]{1,})$/g.test(name);\r\n\r\n  fixModelName = (\r\n    name: string,\r\n    options: { type?: FormattingSchemaType },\r\n  ): string => {\r\n    if (!this.isValidName(name)) {\r\n      if (!/^[a-zA-Z_$]/g.test(name)) {\r\n        const fixPrefix =\r\n          options.type === \"enum-key\"\r\n            ? this.config.fixInvalidEnumKeyPrefix\r\n            : this.config.fixInvalidTypeNamePrefix;\r\n        return `${fixPrefix} ${name}`;\r\n      }\r\n\r\n      // specific replaces for TSOA 3.x\r\n      if (name.includes(\".\")) {\r\n        return name\r\n          .replace(/Exclude_keyof[A-Za-z]+/g, () => \"ExcludeKeys\")\r\n          .replace(/%22~AND~%22/g, \"And\")\r\n          .replace(/%22~OR~%22/g, \"Or\")\r\n          .replace(/(\\.?%22)|\\./g, \"_\")\r\n          .replace(/__+$/, \"\");\r\n      }\r\n\r\n      if (name.includes(\"-\")) {\r\n        return lodash.startCase(name).replace(/ /g, \"\");\r\n      }\r\n    }\r\n\r\n    return name;\r\n  };\r\n}\r\n","import * as fs from \"node:fs\";\r\nimport * as path from \"node:path\";\r\nimport * as url from \"node:url\";\r\nimport { consola } from \"consola\";\r\n\r\nconst FILE_PREFIX = `/* eslint-disable */\r\n/* tslint:disable */\r\n// @ts-nocheck\r\n/*\r\n * ---------------------------------------------------------------\r\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\r\n * ##                                                           ##\r\n * ## AUTHOR: acacode                                           ##\r\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\r\n * ---------------------------------------------------------------\r\n */\r\n\r\n`;\r\n\r\nexport class FileSystem {\r\n  getFileContent = (path: string) => {\r\n    return fs.readFileSync(path, { encoding: \"utf8\" });\r\n  };\r\n\r\n  readDir = (path: string) => {\r\n    return fs.readdirSync(path);\r\n  };\r\n\r\n  pathIsDir = (path: string) => {\r\n    if (!path) return false;\r\n\r\n    try {\r\n      const stat = fs.statSync(path);\r\n      return stat.isDirectory();\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  cropExtension = (fileName: string) => {\r\n    const fileNameParts = fileName.split(\".\");\r\n\r\n    if (fileNameParts.length > 1) {\r\n      fileNameParts.pop();\r\n    }\r\n\r\n    return fileNameParts.join(\".\");\r\n  };\r\n\r\n  removeDir = (path: string) => {\r\n    try {\r\n      if (typeof fs.rmSync === \"function\") {\r\n        fs.rmSync(path, { recursive: true });\r\n      } else {\r\n        fs.rmdirSync(path, { recursive: true });\r\n      }\r\n    } catch (e) {\r\n      consola.debug(\"failed to remove dir\", e);\r\n    }\r\n  };\r\n\r\n  createDir = (path: string) => {\r\n    try {\r\n      fs.mkdirSync(path, { recursive: true });\r\n    } catch (e) {\r\n      consola.debug(\"failed to create dir\", e);\r\n    }\r\n  };\r\n\r\n  cleanDir = (path: string) => {\r\n    this.removeDir(path);\r\n    this.createDir(path);\r\n  };\r\n\r\n  pathIsExist = (path: string) => {\r\n    return !!path && fs.existsSync(path);\r\n  };\r\n\r\n  createFile = ({ path: path_, fileName, content, withPrefix }) => {\r\n    const __dirname = path.dirname(url.fileURLToPath(import.meta.url));\r\n    const absolutePath = path.resolve(__dirname, path_, `./${fileName}`);\r\n    const fileContent = `${withPrefix ? FILE_PREFIX : \"\"}${content}`;\r\n\r\n    return fs.writeFileSync(absolutePath, fileContent);\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport lodash from \"lodash\";\r\nimport * as typescript from \"typescript\";\r\nimport type {\r\n  GenerateApiConfiguration,\r\n  SchemaComponent,\r\n} from \"../types/index.js\";\r\nimport { CodeFormatter } from \"./code-formatter.js\";\r\nimport { CodeGenConfig } from \"./configuration.js\";\r\nimport { SchemaComponentsMap } from \"./schema-components-map.js\";\r\nimport { SchemaParserFabric } from \"./schema-parser/schema-parser-fabric.js\";\r\nimport { SchemaRoutes } from \"./schema-routes/schema-routes.js\";\r\nimport { SchemaWalker } from \"./schema-walker.js\";\r\nimport { SwaggerSchemaResolver } from \"./swagger-schema-resolver.js\";\r\nimport { TemplatesWorker } from \"./templates-worker.js\";\r\nimport { JavascriptTranslator } from \"./translators/javascript.js\";\r\nimport type { TranslatorIO } from \"./translators/translator.js\";\r\nimport { TypeNameFormatter } from \"./type-name-formatter.js\";\r\nimport { FileSystem } from \"./util/file-system.js\";\r\nimport { internalCase } from \"./util/internal-case.js\";\r\nimport { NameResolver } from \"./util/name-resolver.js\";\r\nimport { pascalCase } from \"./util/pascal-case.js\";\r\nimport { sortByProperty } from \"./util/sort-by-property.js\";\r\n\r\nconst PATCHABLE_INSTANCES = [\r\n  \"schemaWalker\",\r\n  \"swaggerSchemaResolver\",\r\n  \"schemaComponentsMap\",\r\n  \"typeNameFormatter\",\r\n  \"templatesWorker\",\r\n  \"codeFormatter\",\r\n  \"schemaParserFabric\",\r\n  \"schemaRoutes\",\r\n  \"javascriptTranslator\",\r\n];\r\n\r\nexport class CodeGenProcess {\r\n  config: CodeGenConfig;\r\n  swaggerSchemaResolver: SwaggerSchemaResolver;\r\n  schemaComponentsMap: SchemaComponentsMap;\r\n  typeNameFormatter: TypeNameFormatter;\r\n  schemaParserFabric: SchemaParserFabric;\r\n  schemaRoutes: SchemaRoutes;\r\n  fileSystem: FileSystem;\r\n  codeFormatter: CodeFormatter;\r\n  templatesWorker: TemplatesWorker;\r\n  schemaWalker: SchemaWalker;\r\n  javascriptTranslator: JavascriptTranslator;\r\n\r\n  constructor(config: Partial<GenerateApiConfiguration[\"config\"]>) {\r\n    this.config = new CodeGenConfig(config);\r\n    this.fileSystem = new FileSystem();\r\n    this.swaggerSchemaResolver = new SwaggerSchemaResolver(\r\n      this.config,\r\n      this.fileSystem,\r\n    );\r\n    this.schemaWalker = new SchemaWalker(\r\n      this.config,\r\n      this.swaggerSchemaResolver,\r\n    );\r\n    this.schemaComponentsMap = new SchemaComponentsMap(this.config);\r\n    this.typeNameFormatter = new TypeNameFormatter(this.config);\r\n    this.templatesWorker = new TemplatesWorker(\r\n      this.config,\r\n      this.fileSystem,\r\n      this.getRenderTemplateData,\r\n    );\r\n    this.codeFormatter = new CodeFormatter(this.config);\r\n    this.schemaParserFabric = new SchemaParserFabric(\r\n      this.config,\r\n      this.templatesWorker,\r\n      this.schemaComponentsMap,\r\n      this.typeNameFormatter,\r\n      this.schemaWalker,\r\n    );\r\n    this.schemaRoutes = new SchemaRoutes(\r\n      this.config,\r\n      this.schemaParserFabric,\r\n      this.schemaComponentsMap,\r\n      this.templatesWorker,\r\n      this.typeNameFormatter,\r\n    );\r\n    this.javascriptTranslator = new JavascriptTranslator(\r\n      this.config,\r\n      this.codeFormatter,\r\n    );\r\n  }\r\n\r\n  async start() {\r\n    this.config.update({\r\n      templatePaths: this.templatesWorker.getTemplatePaths(this.config),\r\n    });\r\n    this.config.update({\r\n      templatesToRender: this.templatesWorker.getTemplates(this.config),\r\n    });\r\n\r\n    const swagger = await this.swaggerSchemaResolver.create();\r\n\r\n    this.swaggerSchemaResolver.fixSwaggerSchema(swagger);\r\n\r\n    this.config.update({\r\n      swaggerSchema: swagger.usageSchema,\r\n      originalSchema: swagger.originalSchema,\r\n    });\r\n\r\n    this.schemaWalker.addSchema(\"$usage\", swagger.usageSchema);\r\n    this.schemaWalker.addSchema(\"$original\", swagger.originalSchema);\r\n\r\n    consola.info(\"start generating your typescript api\");\r\n\r\n    this.config.update(\r\n      this.config.hooks.onInit(this.config, this) || this.config,\r\n    );\r\n\r\n    this.schemaComponentsMap.clear();\r\n\r\n    lodash.each(swagger.usageSchema.components, (component, componentName) =>\r\n      lodash.each(component, (rawTypeData, typeName) => {\r\n        this.schemaComponentsMap.createComponent(\r\n          this.schemaComponentsMap.createRef([\r\n            \"components\",\r\n            componentName,\r\n            typeName,\r\n          ]),\r\n          rawTypeData,\r\n        );\r\n      }),\r\n    );\r\n\r\n    const componentsToParse: SchemaComponent[] =\r\n      this.schemaComponentsMap.filter(\r\n        lodash.compact([\r\n          \"schemas\",\r\n          this.config.extractResponses && \"responses\",\r\n        ]),\r\n      );\r\n\r\n    const parsedSchemas = componentsToParse.map((schemaComponent) => {\r\n      const parsed = this.schemaParserFabric.parseSchema(\r\n        schemaComponent.rawTypeData,\r\n        schemaComponent.typeName,\r\n      );\r\n      schemaComponent.typeData = parsed;\r\n      return parsed;\r\n    });\r\n\r\n    this.schemaRoutes.attachSchema({\r\n      usageSchema: swagger.usageSchema,\r\n      parsedSchemas,\r\n    });\r\n\r\n    const rawConfiguration = {\r\n      apiConfig: this.createApiConfig(swagger.usageSchema),\r\n      config: this.config,\r\n      modelTypes: this.collectModelTypes(),\r\n      hasSecurityRoutes: this.schemaRoutes.hasSecurityRoutes,\r\n      hasQueryRoutes: this.schemaRoutes.hasQueryRoutes,\r\n      hasFormDataRoutes: this.schemaRoutes.hasFormDataRoutes,\r\n      generateResponses: this.config.generateResponses,\r\n      routes: this.schemaRoutes.getGroupedRoutes(),\r\n      extraTemplates: this.config.extraTemplates,\r\n      fileName: this.config.fileName,\r\n      translateToJavaScript: this.config.toJS,\r\n      customTranslator: this.config.customTranslator\r\n        ? new this.config.customTranslator()\r\n        : null,\r\n      utils: this.getRenderTemplateData().utils,\r\n    };\r\n\r\n    const configuration =\r\n      this.config.hooks.onPrepareConfig(rawConfiguration) || rawConfiguration;\r\n\r\n    if (this.fileSystem.pathIsExist(this.config.output)) {\r\n      if (this.config.cleanOutput) {\r\n        consola.debug(\"cleaning dir\", this.config.output);\r\n        this.fileSystem.cleanDir(this.config.output);\r\n      }\r\n    } else {\r\n      consola.debug(\r\n        `path ${this.config.output} is not exist. creating dir by this path`,\r\n      );\r\n      this.fileSystem.createDir(this.config.output);\r\n    }\r\n\r\n    const files = await this.generateOutputFiles({\r\n      configuration: configuration,\r\n    });\r\n\r\n    const isDirPath = this.fileSystem.pathIsDir(this.config.output);\r\n\r\n    if (isDirPath) {\r\n      for (const file of files) {\r\n        this.fileSystem.createFile({\r\n          path: this.config.output,\r\n          fileName: `${file.fileName}${file.fileExtension}`,\r\n          content: file.fileContent,\r\n          withPrefix: true,\r\n        });\r\n\r\n        consola.success(\r\n          \"api file\",\r\n          `\"${file.fileName}${file.fileExtension}\"`,\r\n          `created in ${this.config.output}`,\r\n        );\r\n      }\r\n    }\r\n\r\n    return {\r\n      files,\r\n      configuration,\r\n      getTemplate: this.templatesWorker.getTemplate,\r\n      renderTemplate: this.templatesWorker.renderTemplate,\r\n      createFile: this.fileSystem.createFile,\r\n      formatTSContent: this.codeFormatter.formatCode,\r\n    };\r\n  }\r\n\r\n  getRenderTemplateData = () => {\r\n    return {\r\n      utils: {\r\n        Ts: this.config.Ts,\r\n        formatDescription:\r\n          this.schemaParserFabric.schemaFormatters.formatDescription,\r\n        internalCase: internalCase,\r\n        classNameCase: pascalCase,\r\n        pascalCase: pascalCase,\r\n        getInlineParseContent: this.schemaParserFabric.getInlineParseContent,\r\n        getParseContent: this.schemaParserFabric.getParseContent,\r\n        getComponentByRef: this.schemaComponentsMap.get,\r\n        parseSchema: this.schemaParserFabric.parseSchema,\r\n        checkAndAddNull: this.schemaParserFabric.schemaUtils.safeAddNullToType,\r\n        safeAddNullToType:\r\n          this.schemaParserFabric.schemaUtils.safeAddNullToType,\r\n        isNeedToAddNull:\r\n          this.schemaParserFabric.schemaUtils.isNullMissingInType,\r\n        inlineExtraFormatters: this.schemaParserFabric.schemaFormatters.inline,\r\n        formatters: this.schemaParserFabric.schemaFormatters.base,\r\n        formatModelName: this.typeNameFormatter.format,\r\n        fmtToJSDocLine: (line: string, { eol = true }) => {\r\n          return ` * ${line}${eol ? \"\\n\" : \"\"}`;\r\n        },\r\n        NameResolver: NameResolver,\r\n        _: lodash,\r\n        require: this.templatesWorker.requireFnFromTemplate,\r\n      },\r\n      config: this.config,\r\n    };\r\n  };\r\n\r\n  collectModelTypes = () => {\r\n    const components = this.schemaComponentsMap.getComponents();\r\n    let modelTypes = [];\r\n\r\n    const modelTypeComponents = lodash.compact([\r\n      \"schemas\",\r\n      this.config.extractResponses && \"responses\",\r\n    ]);\r\n\r\n    const getSchemaComponentsCount = () =>\r\n      this.schemaComponentsMap.filter(...modelTypeComponents).length;\r\n\r\n    let schemaComponentsCount = getSchemaComponentsCount();\r\n    let processedCount = 0;\r\n\r\n    while (processedCount < schemaComponentsCount) {\r\n      modelTypes = [];\r\n      processedCount = 0;\r\n      for (const component of components) {\r\n        if (modelTypeComponents.includes(component.componentName)) {\r\n          const modelType = this.prepareModelType(component);\r\n          if (modelType) {\r\n            modelTypes.push(modelType);\r\n          }\r\n          processedCount++;\r\n        }\r\n      }\r\n      schemaComponentsCount = getSchemaComponentsCount();\r\n    }\r\n\r\n    if (this.config.sortTypes) {\r\n      return modelTypes.sort(sortByProperty(\"name\"));\r\n    }\r\n\r\n    return modelTypes;\r\n  };\r\n\r\n  prepareModelType = (typeInfo) => {\r\n    if (typeInfo.$prepared) return typeInfo.$prepared;\r\n\r\n    if (!typeInfo.typeData) {\r\n      typeInfo.typeData = this.schemaParserFabric.parseSchema(\r\n        typeInfo.rawTypeData,\r\n        typeInfo.typeName,\r\n      );\r\n    }\r\n    const rawTypeData = typeInfo.typeData;\r\n    const typeData = this.schemaParserFabric.schemaFormatters.base[\r\n      rawTypeData.type\r\n    ]\r\n      ? this.schemaParserFabric.schemaFormatters.base[rawTypeData.type](\r\n          rawTypeData,\r\n        )\r\n      : rawTypeData;\r\n    const {\r\n      typeIdentifier,\r\n      name: originalName,\r\n      content,\r\n      description,\r\n    } = typeData;\r\n    const name = this.typeNameFormatter.format(originalName);\r\n\r\n    if (name === null) return null;\r\n\r\n    const preparedModelType = {\r\n      ...typeData,\r\n      typeIdentifier,\r\n      name,\r\n      description,\r\n      $content: rawTypeData.content,\r\n      rawContent: rawTypeData.content,\r\n      content: content,\r\n      typeData,\r\n    };\r\n\r\n    typeInfo.$prepared = preparedModelType;\r\n\r\n    return preparedModelType;\r\n  };\r\n\r\n  generateOutputFiles = async ({ configuration }): Promise<TranslatorIO[]> => {\r\n    const { modular, templatesToRender } = this.config;\r\n\r\n    const output = modular\r\n      ? await this.createMultipleFileInfos(templatesToRender, configuration)\r\n      : await this.createSingleFileInfo(templatesToRender, configuration);\r\n\r\n    if (!lodash.isEmpty(configuration.extraTemplates)) {\r\n      for (const extraTemplate of configuration.extraTemplates) {\r\n        configuration.metadata = extraTemplate.metadata\r\n        const content = this.templatesWorker.renderTemplate(\r\n          this.fileSystem.getFileContent(extraTemplate.path),\r\n          configuration,\r\n        );\r\n        output.push(\r\n          ...(await this.createOutputFileInfo(\r\n            configuration,\r\n            extraTemplate.name,\r\n            content,\r\n          )),\r\n        );\r\n      }\r\n    }\r\n\r\n    return output.filter((fileInfo) => !!fileInfo && !!fileInfo.fileContent);\r\n  };\r\n\r\n  createMultipleFileInfos = async (\r\n    templatesToRender,\r\n    configuration,\r\n  ): Promise<TranslatorIO[]> => {\r\n    const { routes } = configuration;\r\n    const { fileNames, generateRouteTypes, generateClient } =\r\n      configuration.config;\r\n    const modularApiFileInfos: TranslatorIO[] = [];\r\n\r\n    if (routes.$outOfModule) {\r\n      if (generateRouteTypes) {\r\n        const outOfModuleRouteContent = this.templatesWorker.renderTemplate(\r\n          templatesToRender.routeTypes,\r\n          {\r\n            ...configuration,\r\n            route: configuration.routes.$outOfModule,\r\n          },\r\n        );\r\n\r\n        modularApiFileInfos.push(\r\n          ...(await this.createOutputFileInfo(\r\n            configuration,\r\n            fileNames.outOfModuleApi,\r\n            outOfModuleRouteContent,\r\n          )),\r\n        );\r\n      }\r\n      if (generateClient) {\r\n        const outOfModuleApiContent = this.templatesWorker.renderTemplate(\r\n          templatesToRender.api,\r\n          {\r\n            ...configuration,\r\n            route: configuration.routes.$outOfModule,\r\n          },\r\n        );\r\n\r\n        modularApiFileInfos.push(\r\n          ...(await this.createOutputFileInfo(\r\n            configuration,\r\n            fileNames.outOfModuleApi,\r\n            outOfModuleApiContent,\r\n          )),\r\n        );\r\n      }\r\n    }\r\n\r\n    if (routes.combined) {\r\n      for (const route of routes.combined) {\r\n        if (generateRouteTypes) {\r\n          const routeModuleContent = this.templatesWorker.renderTemplate(\r\n            templatesToRender.routeTypes,\r\n            {\r\n              ...configuration,\r\n              route,\r\n            },\r\n          );\r\n\r\n          modularApiFileInfos.push(\r\n            ...(await this.createOutputFileInfo(\r\n              configuration,\r\n              pascalCase(`${route.moduleName}_Route`),\r\n              routeModuleContent,\r\n            )),\r\n          );\r\n        }\r\n\r\n        if (generateClient) {\r\n          const apiModuleContent = this.templatesWorker.renderTemplate(\r\n            templatesToRender.api,\r\n            {\r\n              ...configuration,\r\n              route,\r\n            },\r\n          );\r\n\r\n          modularApiFileInfos.push(\r\n            ...(await this.createOutputFileInfo(\r\n              configuration,\r\n              pascalCase(route.moduleName),\r\n              apiModuleContent,\r\n            )),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return [\r\n      ...(await this.createOutputFileInfo(\r\n        configuration,\r\n        fileNames.dataContracts,\r\n        this.templatesWorker.renderTemplate(\r\n          templatesToRender.dataContracts,\r\n          configuration,\r\n        ),\r\n      )),\r\n      ...(generateClient\r\n        ? await this.createOutputFileInfo(\r\n            configuration,\r\n            fileNames.httpClient,\r\n            this.templatesWorker.renderTemplate(\r\n              templatesToRender.httpClient,\r\n              configuration,\r\n            ),\r\n          )\r\n        : []),\r\n      ...modularApiFileInfos,\r\n    ];\r\n  };\r\n\r\n  createSingleFileInfo = async (\r\n    templatesToRender,\r\n    configuration,\r\n  ): Promise<TranslatorIO[]> => {\r\n    const { generateRouteTypes, generateClient } = configuration.config;\r\n\r\n    return await this.createOutputFileInfo(\r\n      configuration,\r\n      configuration.fileName,\r\n      lodash\r\n        .compact([\r\n          this.templatesWorker.renderTemplate(\r\n            templatesToRender.dataContracts,\r\n            configuration,\r\n          ),\r\n          generateRouteTypes &&\r\n            this.templatesWorker.renderTemplate(\r\n              templatesToRender.routeTypes,\r\n              configuration,\r\n            ),\r\n          generateClient &&\r\n            this.templatesWorker.renderTemplate(\r\n              templatesToRender.httpClient,\r\n              configuration,\r\n            ),\r\n          generateClient &&\r\n            this.templatesWorker.renderTemplate(\r\n              templatesToRender.api,\r\n              configuration,\r\n            ),\r\n        ])\r\n        .join(\"\\n\"),\r\n    );\r\n  };\r\n\r\n  createOutputFileInfo = async (\r\n    configuration,\r\n    fileNameFull,\r\n    content,\r\n  ): Promise<TranslatorIO[]> => {\r\n    const fileName = this.fileSystem.cropExtension(fileNameFull);\r\n    const fileExtension = typescript.Extension.Ts;\r\n\r\n    if (configuration.translateToJavaScript) {\r\n      consola.debug(\"using js translator for\", fileName);\r\n      return await this.javascriptTranslator.translate({\r\n        fileName: fileName,\r\n        fileExtension: fileExtension,\r\n        fileContent: content,\r\n      });\r\n    }\r\n\r\n    if (configuration.customTranslator) {\r\n      consola.debug(\"using custom translator for\", fileName);\r\n      return await configuration.customTranslator.translate({\r\n        fileName: fileName,\r\n        fileExtension: fileExtension,\r\n        fileContent: content,\r\n      });\r\n    }\r\n\r\n    consola.debug(\"generating output for\", `${fileName}${fileExtension}`);\r\n\r\n    return [\r\n      {\r\n        fileName,\r\n        fileExtension: fileExtension,\r\n        fileContent: await this.codeFormatter.formatCode(content),\r\n      },\r\n    ];\r\n  };\r\n\r\n  createApiConfig = (swaggerSchema) => {\r\n    const { info, servers, host, basePath, externalDocs, tags } = swaggerSchema;\r\n    const server = servers?.[0] || { url: \"\" };\r\n    const { title = \"No title\", version } = info || {};\r\n    const { url: serverUrl } = server;\r\n\r\n    return {\r\n      info: info || {},\r\n      servers: servers || [],\r\n      basePath,\r\n      host,\r\n      externalDocs: lodash.merge(\r\n        {\r\n          url: \"\",\r\n          description: \"\",\r\n        },\r\n        externalDocs,\r\n      ),\r\n      tags: lodash.compact(tags),\r\n      baseUrl: serverUrl,\r\n      title,\r\n      version,\r\n    };\r\n  };\r\n\r\n  injectClassInstance = (key, value) => {\r\n    this[key] = value;\r\n    for (const instanceKey of PATCHABLE_INSTANCES) {\r\n      if (instanceKey !== key && key in this[instanceKey]) {\r\n        this[instanceKey][key] = value;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import type {\r\n  GenerateTemplatesParams,\r\n  HttpClientType,\r\n} from \"../../../types/index.js\";\r\nimport { HTTP_CLIENT, PROJECT_VERSION } from \"../../constants.js\";\r\nimport { objectAssign } from \"../../util/object-assign.js\";\r\n\r\nexport class TemplatesGenConfig {\r\n  cleanOutput = false;\r\n  output = undefined;\r\n  httpClientType: HttpClientType = HTTP_CLIENT.FETCH;\r\n  modular = false;\r\n  rewrite = false;\r\n  silent = false;\r\n  debug = false;\r\n  version = PROJECT_VERSION;\r\n\r\n  constructor(config: GenerateTemplatesParams) {\r\n    this.update(config);\r\n  }\r\n\r\n  update = (update: Partial<GenerateTemplatesParams>) => {\r\n    objectAssign(this, update);\r\n  };\r\n}\r\n","import path from \"node:path\";\r\nimport url from \"node:url\";\r\nimport { consola } from \"consola\";\r\nimport type {\r\n  GenerateTemplatesOutput,\r\n  GenerateTemplatesParams,\r\n} from \"../../../types/index.js\";\r\nimport { FileSystem } from \"../../util/file-system.js\";\r\nimport { TemplatesGenConfig } from \"./configuration.js\";\r\n\r\nconst __dirname = path.dirname(url.fileURLToPath(import.meta.url));\r\n\r\nexport class TemplatesGenProcess {\r\n  config: TemplatesGenConfig;\r\n  fileSystem: FileSystem;\r\n\r\n  rootDir = path.resolve(__dirname, \"../../../\");\r\n\r\n  paths = {\r\n    baseTemplates: \"templates/base\",\r\n    httpClientTemplates: \"templates/base/http-clients\",\r\n    moduleApiTemplates: \"templates/modular\",\r\n    defaultApiTemplates: \"templates/default\",\r\n  };\r\n\r\n  importTemplatePrefixes = [\"@base\", \"@modular\", \"@default\"];\r\n\r\n  constructor(config: GenerateTemplatesParams) {\r\n    this.config = new TemplatesGenConfig(config);\r\n    this.fileSystem = new FileSystem();\r\n  }\r\n\r\n  async start(): Promise<GenerateTemplatesOutput> {\r\n    consola.info('start generating source templates \".ejs\" for code generator');\r\n\r\n    const templates = this.getTemplates();\r\n\r\n    if (this.config.output) {\r\n      consola.info(\"preparing output directory for source templates\");\r\n      const outputPath = path.resolve(process.cwd(), this.config.output);\r\n\r\n      if (this.fileSystem.pathIsExist(outputPath)) {\r\n        if (this.config.cleanOutput) {\r\n          this.fileSystem.cleanDir(outputPath);\r\n        }\r\n      } else {\r\n        this.fileSystem.createDir(outputPath);\r\n      }\r\n\r\n      for (const template of templates) {\r\n        const templateName = this.fileSystem.cropExtension(template.name);\r\n        const templateEjsPath = path.resolve(outputPath, `${templateName}.ejs`);\r\n        const templateEtaPath = path.resolve(outputPath, `${templateName}.eta`);\r\n        const templateEjsPathExist =\r\n          this.fileSystem.pathIsExist(templateEjsPath);\r\n        const templateEtaPathExist =\r\n          this.fileSystem.pathIsExist(templateEtaPath);\r\n\r\n        const templateNotExist = !templateEjsPathExist && !templateEtaPathExist;\r\n\r\n        if (templateNotExist) {\r\n          this.fileSystem.createFile({\r\n            path: outputPath,\r\n            fileName: template.name,\r\n            content: template.content,\r\n            withPrefix: false,\r\n          });\r\n        } else if (this.config.rewrite) {\r\n          if (templateEjsPathExist) {\r\n            this.fileSystem.createFile({\r\n              path: outputPath,\r\n              fileName: `${templateName}.ejs`,\r\n              content: template.content,\r\n              withPrefix: false,\r\n            });\r\n          } else if (templateEtaPathExist) {\r\n            this.fileSystem.createFile({\r\n              path: outputPath,\r\n              fileName: `${templateName}.eta`,\r\n              content: template.content,\r\n              withPrefix: false,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      consola.success(\r\n        `source templates has been successfully created in \"${outputPath}\"`,\r\n      );\r\n    }\r\n\r\n    return {\r\n      files: templates,\r\n      configuration: this.config,\r\n      createFile: this.fileSystem.createFile,\r\n    };\r\n  }\r\n\r\n  getTemplates = () => {\r\n    const outputFiles = [];\r\n    const baseTemplates = this.getTemplateNamesFromDir(\r\n      this.paths.baseTemplates,\r\n    );\r\n    const httpClientTemplates = this.getTemplateNamesFromDir(\r\n      this.paths.httpClientTemplates,\r\n    );\r\n    const apiTemplatesPath = this.config.modular\r\n      ? this.paths.moduleApiTemplates\r\n      : this.paths.defaultApiTemplates;\r\n    const apiTemplates = this.getTemplateNamesFromDir(apiTemplatesPath);\r\n\r\n    const usingHttpClientTemplate = httpClientTemplates.find((template) =>\r\n      template.startsWith(`${this.config.httpClientType}-`),\r\n    );\r\n\r\n    let httpClientTemplateContent = \"\";\r\n\r\n    if (usingHttpClientTemplate) {\r\n      httpClientTemplateContent = this.fixTemplateContent(\r\n        this.getTemplateContent(\r\n          `${this.paths.httpClientTemplates}/${usingHttpClientTemplate}`,\r\n        ),\r\n      );\r\n    }\r\n\r\n    for (const fileName of baseTemplates) {\r\n      const templateContent =\r\n        (fileName === \"http-client.ejs\" && httpClientTemplateContent) ||\r\n        this.fixTemplateContent(\r\n          this.getTemplateContent(`${this.paths.baseTemplates}/${fileName}`),\r\n        );\r\n\r\n      outputFiles.push({\r\n        name: fileName,\r\n        content: templateContent,\r\n      });\r\n    }\r\n\r\n    for (const fileName of apiTemplates) {\r\n      outputFiles.push({\r\n        name: fileName,\r\n        content: this.fixTemplateContent(\r\n          this.getTemplateContent(`${apiTemplatesPath}/${fileName}`),\r\n        ),\r\n      });\r\n    }\r\n\r\n    return outputFiles;\r\n  };\r\n\r\n  fixTemplateContent = (content) => {\r\n    // includeFile(\"@base/\r\n    const importsRegExp1 = new RegExp(\r\n      `includeFile\\\\(\"(${this.importTemplatePrefixes\r\n        .map((v) => `(${v})`)\r\n        .join(\"|\")})/`,\r\n      \"g\",\r\n    );\r\n    // includeFile(`@base/\r\n    const importsRegExp2 = new RegExp(\r\n      `includeFile\\\\(\\`(${this.importTemplatePrefixes\r\n        .map((v) => `(${v})`)\r\n        .join(\"|\")})/`,\r\n      \"g\",\r\n    );\r\n    // includeFile('@base/\r\n    const importsRegExp3 = new RegExp(\r\n      `includeFile\\\\('(${this.importTemplatePrefixes\r\n        .map((v) => `(${v})`)\r\n        .join(\"|\")})/`,\r\n      \"g\",\r\n    );\r\n\r\n    return content\r\n      .replace(importsRegExp1, 'includeFile(\"./')\r\n      .replace(importsRegExp2, \"includeFile(`./\")\r\n      .replace(importsRegExp3, \"includeFile('./\");\r\n  };\r\n\r\n  getTemplateNamesFromDir = (dir) => {\r\n    return this.fileSystem\r\n      .readDir(path.resolve(this.rootDir, dir))\r\n      .filter((file) => file.endsWith(\".ejs\"));\r\n  };\r\n\r\n  getTemplateContent = (pathToFile) => {\r\n    return this.fileSystem.getFileContent(\r\n      path.resolve(this.rootDir, pathToFile),\r\n    );\r\n  };\r\n}\r\n","import { consola } from \"consola\";\r\nimport type { GenerateTemplatesParams } from \"../../../types/index.js\";\r\nimport { TemplatesGenProcess } from \"./templates-gen-process.js\";\r\n\r\nexport async function generateTemplates(config: GenerateTemplatesParams) {\r\n  if (config.debug) consola.level = Number.MAX_SAFE_INTEGER;\r\n  if (config.silent) consola.level = 0;\r\n  const codeGenProcess = new TemplatesGenProcess(config);\r\n  return await codeGenProcess.start();\r\n}\r\n"]}